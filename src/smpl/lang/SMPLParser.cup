package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;

parser code {:
	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}

:};

init with {:
    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );
:};

// special symbols
terminal            SEMI, COLON, LPAREN, RPAREN, LBRACE, RBRACE, COMMA;
terminal String		IDENTIFIER;
terminal Integer   	INTEGER_LITERAL;        // our scanner provides numbers as integers

// operators: arithmetic
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;

// operators: bitwise
terminal AMP, BAR, TILDE;

// operators: relational
terminal EQ, GT, LT, LTEQ, GTEQ, NOTEQ;

// operators: logical
terminal AND, OR, NOT;

// operators: assignment
terminal ASSIGN, IMPLY, QUERY;

/* Non terminals */
non terminal			program;
non terminal Vector		statement_list;
non terminal Vector		statement_block;
non terminal			statement;
non terminal String		variable;
non terminal            expression_list;
non terminal Boolean	condition_list;
non terminal Boolean	condition;
non terminal Integer   	expression;      // used to store evaluated subexpressions
non terminal Vector 	parameter_list;
non terminal Vector		variable_list;
non terminal empty;

/* Precedences. Highest precedence is at the bottom. */
precedence nonassoc LPAREN, RPAREN, COLON, QUERY;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc GT, LT, EQ, LTEQ, GTEQ, NOTEQ;
precedence left AMP, BAR;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left TILDE;

/* Grammar Rules */

program ::= statement_list:sl 						{: System.out.println(sl); :};

statement_block ::= LBRACE statement_list:l RBRACE	{: RESULT = l; :}
				;

statement_list ::= statement:stmt statement_list:sl {: sl.addElement(stmt); RESULT = sl ; :} 
				
				| empty 							{: RESULT = new Vector(); :}
				;

statement ::= expression_list:l SEMI							{: RESULT = l;	:}

			| IDENTIFIER:i LPAREN parameter_list:l RPAREN		{: RESULT = 5; :}

			| IDENTIFIER:i ASSIGN expression_list:l SEMI		{: RESULT = "CMD " + i + " = " + l + "";	:}

			| IDENTIFIER:i ASSIGN LPAREN variable_list:l RPAREN statement_block:sl {: RESULT = "CMD " + i + " = (" + l + ") {\n" + sl + "\n}"; :}

			| condition_list:l QUERY expression_list:e SEMI			{: RESULT = "CMD condition ? " + e; :}

			| condition_list:l QUERY expression_list:e1 COLON expression_list:e2 SEMI	{: RESULT = "CMD condition ? " + e1 + " : " + e2; :}
			;

parameter_list ::= expression_list:e COMMA parameter_list:l		{: l.addElement(e); RESULT = l; :}
			
			| empty										{: RESULT = new Vector(); 		:}
			;

variable_list ::= variable_list:l COMMA variable:v 	{: l.addElement(v); RESULT = l; :}

			| variable:v							{: Vector l = new Vector(); l.addElement(v); RESULT = l;:}

			| empty									{: RESULT = new Vector(); :}
			;

variable ::= COLON IDENTIFIER:i			{: RESULT = i; :}
			;

expression_list ::= expression_list expression:e	{: RESULT = e;			:}

			

            | expression:e							{: RESULT = e;			:}
			;

expression ::= 	expression:e1 PLUS expression:e2	{: RESULT = e1 + e2;       	:}

             | expression:e1 MINUS expression:e2	{: RESULT = e1 - e2;       	:}

             | expression:e1 TIMES expression:e2	{: RESULT = e1 * e2;       	:}

			 | expression:e1 DIVIDE expression:e2	{: RESULT = e1 / e2;       	:}

			 | expression:e1 MOD expression:e2		{: RESULT = e1 % e2;       	:}

			 | expression:e1 AMP expression:e2		{: RESULT = e1 & e2;		:}

			 | expression:e1 BAR expression:e2		{: RESULT = e1 | e2;		:}

			 | TILDE expression:e					{: RESULT = ~e;		:}

             | LPAREN MINUS expression:e RPAREN		{: RESULT = -e;				:}

             | LPAREN expression:e RPAREN			{: RESULT = e;           	:}

			 | IDENTIFIER:i							{: RESULT = 2; // TBC .. I have a dilemma here. This clashes with a rule in statement but I need to to evaluate a variable in expressions		:}

             | INTEGER_LITERAL:n	      			{: RESULT = n;           	:}
             ;

condition_list ::= condition_list:c1 AND condition:c2	{: RESULT = (c1 && c2);	:}

				| condition_list:c1 OR condition:c2		{: RESULT = (c1 || c2);	:}

				| NOT condition:c						{: RESULT = (!c);		:}

				| condition:c							{: RESULT = c;			:}
				;

condition ::=  expression:e1 EQ expression:e2		{: RESULT = (e1.equals(e2));:}

            	| expression:e1 LT expression:e2	{: RESULT = (e1 < e2); 		:}

            	| expression:e1 GT expression:e2	{: RESULT = (e1 > e2); 		:}

				| expression:e1 LTEQ expression:e2 	{: RESULT = (e1 <= e2); 	:}

				| expression:e1 GTEQ expression:e2	{: RESULT = (e1 >= e2); 	:}

				| expression:e1 NOTEQ expression:e2	{: RESULT = (e1 != e2); 	:}

				| LPAREN condition:c RPAREN			{: RESULT = c;				:}
               ;

empty ::=;