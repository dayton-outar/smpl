package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import smpl.sys.*;
import smpl.sys.expressions.*;
import smpl.sys.commands.*;
import smpl.sys.util.*;

parser code {:

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		SMPLLexer lexer = (SMPLLexer) getScanner();

		System.err.print( String.format("Line %1$s near character %2$s:\n", lexer.getLine(), lexer.getChar()) );

		report_error("Syntax error while reading: ", sym.terminalNames[cur_token.sym]);

		System.err.println ( String.format("Last token read is ... %s.", lexer.getText()) );
	}

:};

// special symbols
terminal            SEMI, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRAK, RBRAK, MAP, COMMA;
terminal String		IDENTIFIER, STRING, BINARY, HEX, OCTAL;
terminal Long   	LONG;
terminal Double		DOUBLE;
terminal Boolean	TRUE, FALSE;

// special value tokens
terminal PI, EULER, SIGMA;

// display operators
terminal PRINT, READ;

// operators: arithmetic
terminal PLUS, ASSIGNADD, INCREMENT, MINUS, ASSIGNSUB, DECREMENT, TIMES, ASSIGNTIMES, EXPONENT, DIVIDE, ASSIGNDIVIDE, RADICAL, MOD, ASSIGNMOD;

// operators: bitwise
terminal AMP, ASSIGNAMP, BAR, ASSIGNBAR, CARET, ASSIGNCARET, TILDE;

// operators: relational
terminal EQ, GT, LT, LTEQ, GTEQ, NOTEQ;

// operators: logical
terminal AND, OR, NOT;

// operators: assignment
terminal ASSIGN, IMPLY, QUERY, CASES;

/* Non terminals */
non terminal Program						program;
non terminal Vector<ICommand>				statement_list;
non terminal Vector<ICommand>				statement_block;
non terminal ICommand						statement;
non terminal ICommand						assignment_statement;
non terminal ICommand						stepper;
non terminal ICommand						intialize_statement;
non terminal Hashtable<String,IExpression>	dictionary;
non terminal Vector<IExpression>			array;
non terminal Vector<Cases>					case_list;
non terminal Cases							case;
non terminal Vector<IExpression>			case_expressions;
non terminal Vector<Elses>					if_clause_list;
non terminal Elses							if_clause;
non terminal IExpression					loop_condition;
non terminal IExpression					logical_expression;
non terminal IExpression					condition;
non terminal IExpression					math_expression;
non terminal IExpression					expression;
non terminal Vector<IExpression>			index_expressions;
non terminal CombinedStringExpression		string_expression;
non terminal Vector<IExpression> 			parameter_list;
non terminal String							variable;
non terminal Vector<String>					variable_list;
non terminal empty;

/* Precedences. Highest precedence is at the bottom. */
precedence nonassoc LPAREN, RPAREN, LBRAK, RBRAK, COLON, QUERY;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc GT, LT, EQ, LTEQ, GTEQ, NOTEQ;
precedence left AMP, BAR, CARET;
precedence left PLUS, MINUS;
precedence left INCREMENT, DECREMENT;
precedence left TIMES, DIVIDE, MOD;
precedence left EXPONENT, SIGMA;
precedence left RADICAL;
precedence left TILDE;

/* Grammar Rules */

program ::= statement_list:sl
			{: RESULT = new Program(sl); :};

statement_block ::= LBRACE statement_list:l RBRACE
			{: RESULT = l; :}
			;

statement_list ::= statement:stmt statement_list:sl
			{: 
				sl.addElement(stmt);
				RESULT = sl;
			:} 
				
			| empty
			{: RESULT = new Vector<ICommand>(); :}
			;

statement ::= expression:e SEMI
			{: RESULT = new ExpressionCommand(e);	:}

			| assignment_statement:s SEMI
			{: RESULT = s;	:}
        
			| IDENTIFIER:i ASSIGN LPAREN variable_list:l RPAREN statement_block:sl
			{: RESULT = new AssignmentFunctionCommand(i, l, sl); :}

			| CASES LBRACE if_clause_list:l RBRACE
			{: RESULT = new ElsesCommand(l); :}

			| CASES LPAREN expression:e RPAREN LBRACE case_list:l RBRACE
			{: RESULT = new CasesCommand(e, l); :}

			| LPAREN intialize_statement:i SEMI loop_condition:c SEMI stepper:s RPAREN statement_block:sl
			{: RESULT = new LoopCommand(i, c, s, sl); :}

			| PRINT expression:e SEMI
			{: RESULT = new PrintCommand(e); :}

			| IDENTIFIER:i READ	SEMI
			{: RESULT = new ReadCommand(i); :}
			;

intialize_statement ::= IDENTIFIER:i ASSIGN math_expression:e 
			{:
				RESULT = new AssignmentExpressionCommand(i, e);
			:}

			| empty
			{: RESULT = null; :}
			;

stepper ::= assignment_statement:s
			{: RESULT = s; :}

			| empty
			{: RESULT = null; :}
			;

assignment_statement ::= IDENTIFIER:i INCREMENT
			{: RESULT = new IncrementCommand(i); :}

			| IDENTIFIER:i DECREMENT
			{: RESULT = new DecrementCommand(i); :}

			| IDENTIFIER:i ASSIGN math_expression:e
			{: RESULT = new AssignmentExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGN condition:c
			{: RESULT = new AssignmentExpressionCommand(i, c); :}

			| IDENTIFIER:i ASSIGNADD math_expression:e
			{: RESULT = new AssignmentAddExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNSUB math_expression:e
			{: RESULT = new AssignmentSubExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNTIMES math_expression:e
			{: RESULT = new AssignmentMulExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNDIVIDE math_expression:e
			{: RESULT = new AssignmentDivExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNMOD math_expression:e
			{: RESULT = new AssignmentModExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNAMP math_expression:e
			{: RESULT = new AssignmentAmpExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNBAR math_expression:e
			{: RESULT = new AssignmentBarExpressionCommand(i, e); :}

			| IDENTIFIER:i ASSIGNCARET math_expression:e
			{: RESULT = new AssignmentInvExpressionCommand(i, e); :}
			;

parameter_list ::= math_expression:e COMMA parameter_list:l
			{:
				l.addElement(e);
				RESULT = l;
			:}

			| math_expression:e
			{: 
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			:}
			
			| empty
			{: RESULT = new Vector<IExpression>(); :}
			;

variable_list ::= variable:v COMMA variable_list:l
			{: l.addElement(v); RESULT = l; :}

			| variable:v
			{:
				Vector<String> l = new Vector<String>();
				l.addElement(v);
				RESULT = l;
			:}

			| empty
			{: RESULT = new Vector<String>(); :}
			;

variable ::= COLON IDENTIFIER:i	
			{: RESULT = i; :}
			;

dictionary ::= dictionary:l COMMA STRING:s MAP math_expression:e
			{:
				l.put(s, e);
				RESULT = l;
			:}

			| STRING:s MAP math_expression:e 
			{:
				Hashtable<String,IExpression> l = new Hashtable<String,IExpression>();
				l.put(s, e);
				RESULT = l;
			:}
			;

array ::= math_expression:e COMMA array:l
			{:
				l.addElement(e);
				RESULT = l;
			:}

			| math_expression:n COLON IDENTIFIER:i IMPLY math_expression:e COMMA array:l 
			{: 
				l.addElement(new ArrayInitializationExpression(n, i, e)); 
				RESULT = l; 
			:}

			| math_expression:e	
			{: 
				Vector<IExpression> l = new Vector<IExpression>(); 
				l.addElement(e); 
				RESULT = l;
			:}

			| math_expression:n COLON IDENTIFIER:i IMPLY math_expression:e 
			{:
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new ArrayInitializationExpression(n, i, e));
				RESULT = l;
			:}

			| empty	
			{: RESULT = new Vector<IExpression>(); :}
			;

expression ::= string_expression:s
			{: RESULT = s; :}

			| math_expression:e
			{: RESULT = e; :}

			| logical_expression:c
			{: RESULT = c; :}
			;

string_expression ::= string_expression:l math_expression:e STRING:s
			{:
				l.add(e);
				l.add(new StringExpression(s));
				RESULT = l;
			:}

			| string_expression:l logical_expression:c STRING:s
			{:
				l.add(c);
				l.add(new StringExpression(s));
				RESULT = l;
			:}

			| STRING:s
			{:
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new StringExpression(s));
				RESULT = new CombinedStringExpression(l);
			:}
			;

math_expression ::= math_expression:e1 PLUS math_expression:e2
			{: RESULT = new AdditionExpression(e1, e2); :}

            | math_expression:e1 MINUS math_expression:e2
			{: RESULT = new SubtractionExpression(e1, e2); :}

            | math_expression:e1 TIMES math_expression:e2
			{: RESULT = new MultiplicationExpression(e1, e2); :}

			| math_expression:e1 EXPONENT math_expression:e2
			{: RESULT = new ExponentExpression(e1, e2); :}

			| math_expression:e1 DIVIDE math_expression:e2
			{: RESULT = new DivisionExpression(e1, e2); :}

			| RADICAL math_expression:e
			{: RESULT = new SquareRootExpression(e); :}

			| math_expression:e1 MOD math_expression:e2
			{: RESULT = new ModulusExpression(e1, e2); :}

			| math_expression:e1 AMP math_expression:e2
			{: RESULT = new BitwiseAndExpression(e1, e2); :}

			| math_expression:e1 BAR math_expression:e2
			{: RESULT = new BitwiseOrExpression(e1, e2); :}

			| math_expression:e1 CARET math_expression:e2
			{: RESULT = new BitwiseXorExpression(e1, e2); :}
			
			| TILDE math_expression:e
			{: RESULT = new BitwiseInvertExpression(e); :}

			| math_expression:l SIGMA IDENTIFIER:i ASSIGN math_expression:f COLON math_expression:e
			{: RESULT = new SigmaNotationExpression(l, f, i, e); :}

            | LPAREN MINUS math_expression:e RPAREN
			{: RESULT = new InvertExpression(e); :}

            | LPAREN math_expression:e RPAREN
			{: RESULT = e; :}

			| LPAREN condition:c RPAREN QUERY expression:e1 COLON expression:e2
			{: RESULT = new QueryExpression(c, e1, e2); :}

			| BAR IDENTIFIER:i BAR
			{: RESULT = new SizeOfExpression(i); :}

			| IDENTIFIER:i LPAREN parameter_list:l RPAREN
			{: RESULT = new FunctionExpression(i, l); :}

			| IDENTIFIER:i index_expressions:l
			{: RESULT = new ComplexDataIndexExpression(i, l); :}

			| IDENTIFIER:i
			{: RESULT = new VariableExpression(i); :}
			
			| LBRAK array:l RBRAK
			{: RESULT = new ArrayExpression(l); :}

			| LBRAK dictionary:l RBRAK
			{: RESULT = new DictionaryExpression(l); :}

            | LONG:n
			{: RESULT = new LongExpression(n); :}

			| BINARY:b
			{: RESULT = new LongExpression(b, 2); :}

			| HEX:h
			{: RESULT = new LongExpression(h, 16); :}

			| OCTAL:o
			{: RESULT = new LongExpression(o, 8); :}

			| DOUBLE:n
			{: RESULT = new DoubleExpression(n); :}

			| PI
			{: RESULT = new DoubleExpression(3.14159); :}

			| EULER
			{: RESULT = new DoubleExpression(2.7182818284590452353602874713527); :}
            ;

index_expressions ::= index_expressions:l LBRAK string_expression:s RBRAK
			{:
				l.addElement(s);
				RESULT = l;
			:}

			| index_expressions:l LBRAK math_expression:e RBRAK
			{:
				l.addElement(e);
				RESULT = l;
			:}

			| LBRAK string_expression:s RBRAK
			{:
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(s);
				RESULT = l;
			:}

			| LBRAK math_expression:e RBRAK
			{:
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			:}
			;

case_list ::= case:c case_list:l
			{:
				l.addElement(c);
				RESULT = l;
			:}

			| empty
			{: RESULT = new Vector<Cases>(); :}
			;

case ::= case_expressions:l statement:s
			{: RESULT = new Cases(l, s); :}
			;

case_expressions ::= case_expressions:l math_expression:e COLON
			{:
				l.addElement(e);
				RESULT = l;
			:}

			| math_expression:e COLON
			{:
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			:}
			;

if_clause_list ::= if_clause:c if_clause_list:l 
			{: 
				l.addElement(c);
				RESULT = l;
			:}

			| empty	
			{: RESULT = new Vector<Elses>(); :}
			;

if_clause ::= logical_expression:c COLON statement:s 
			{: RESULT = new Elses(c, s); :}
			;

loop_condition ::= logical_expression:c
			{: RESULT = c; :}

			| empty
			{: RESULT = new BooleanExpression(Boolean.valueOf(true)); :}
			;

logical_expression ::= logical_expression:c1 AND logical_expression:c2
			{: RESULT = new LogicalAndExpression(c1, c2); :}

			| logical_expression:c1 OR logical_expression:c2
			{: RESULT = new LogicalOrExpression(c1, c2); :}

			| NOT condition:c
			{: RESULT = new LogicalNotExpression(c); :}

			| condition:c
			{: RESULT = c; :}
			;

condition ::=  math_expression:e1 EQ condition:c
			{: RESULT = new EqualsExpression(e1, c); :}

			| math_expression:e1 EQ math_expression:e2
			{: RESULT = new EqualsExpression(e1, e2); :}

			| math_expression:e1 NOTEQ condition:c
			{: RESULT = new NotEqualsExpression(e1, c); :}

			| math_expression:e1 NOTEQ math_expression:e2
			{: RESULT = new NotEqualsExpression(e1, e2); :}

			| math_expression:e1 LT math_expression:e2
			{: RESULT = new LesserThanExpression(e1, e2); :}

            | math_expression:e1 GT math_expression:e2
			{: RESULT = new GreaterThanExpression(e1, e2); :}

			| math_expression:e1 LTEQ math_expression:e2
			{: RESULT = new LesserThanOrEqualsExpression(e1, e2); :}

			| math_expression:e1 GTEQ math_expression:e2
			{: RESULT = new GreaterThanOrEqualsExpression(e1, e2); 	:}

			| LPAREN condition:c RPAREN
			{: RESULT = c;	:}

			| TRUE
			{: RESULT = new BooleanExpression(Boolean.valueOf(true)); :}

			| FALSE
			{: RESULT = new BooleanExpression(Boolean.valueOf(false));	:}
            ;

empty ::=;