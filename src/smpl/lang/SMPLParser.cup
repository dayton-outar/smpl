package smpl.lang;

import java_cup.runtime.*;
import java.io.*;

parser code {:
	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) throws FileNotFoundException {
	    in = new FileInputStream(file);
		lexer = new SMPLLexer(new InputStreamReader(in));
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}

:};

init with {:
    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );
:};

// special symbols
terminal            SEMI, LPAREN, RPAREN;
terminal String		IDENTIFIER;
terminal Integer   	INTEGER_LITERAL;        // our scanner provides numbers as integers

// operators: arithmetic
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;

// operators: bitwise
terminal AMP, BAR, TILDE;

// operators: relational
terminal EQ, GT, LT, LTEQ, GTEQ, NOTEQ;

// operators: logical
terminal AND, OR, NOT;

// operators: assignment
terminal ASSIGN;

/* Non terminals */
non terminal            expr_list;
non terminal			condition_list;
non terminal Boolean	condition;
non terminal Integer   	expr;      // used to store evaluated subexpressions

/* Precedences. Highest precedence is at the bottom. */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;

/* Grammar rules */
expr_list ::= expr_list expr:e SEMI         	{: System.out.println(e);:}
            | expr:e SEMI                   	{: System.out.println(e);:}
			| condition_list condition:c SEMI	{: System.out.println(c);:}
;

expr ::= 	expr:e1 PLUS expr:e2         	{: RESULT = e1 + e2;       	:}

             | expr:e1 MINUS expr:e2        {: RESULT = e1 - e2;       	:}

             | expr:e1 TIMES expr:e2        {: RESULT = e1 * e2;       	:}

			 | expr:e1 DIVIDE expr:e2       {: RESULT = e1 / e2;       	:}

			 | expr:e1 MOD expr:e2        	{: RESULT = e1 % e2;       	:}

             | MINUS expr:e                 {: RESULT = -e;				:}

             | LPAREN expr:e RPAREN	        {: RESULT = e;           	:}

             | INTEGER_LITERAL:n	        {: RESULT = n;           	:}
             ;

condition_list ::=	condition:c1 AND condition:c2	{: RESULT = (c1 && c2);	:}
				| condition:c1 OR condition:c2		{: RESULT = (c1 || c2);	:}
				| LPAREN condition:c RPAREN	        {: RESULT = c;			:}
				| NOT condition:c					{: RESULT = (!c);		:}
				;

condition ::=  expr:e1 GT expr:e2			{: RESULT = (e1 > e2); 		:}

               | expr:e1 LT expr:e2			{: RESULT = (e1 < e2); 		:}

               | expr:e1 EQ expr:e2			{: RESULT = (e1 == e2); 	:}

			   | expr:e1 LTEQ expr:e2 		{: RESULT = (e1 <= e2); 	:}

			   | expr:e1 GTEQ expr:e2		{: RESULT = (e1 >= e2); 	:}

			   | expr:e1 NOTEQ expr:e2		{: RESULT = (e1 != e2); 	:}
               ;