
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import smpl.sys.*;
import smpl.sys.expressions.*;
import smpl.sys.commands.*;
import smpl.sys.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\010\000\002\005\011\000" +
    "\002\005\006\000\002\005\011\000\002\005\012\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\010" +
    "\005\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\025\005\000\002\025\003" +
    "\000\002\025\003\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\026\004\000\002\011\007\000\002" +
    "\011\005\000\002\012\005\000\002\012\011\000\002\012" +
    "\003\000\002\012\007\000\002\012\003\000\002\020\004" +
    "\000\002\020\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\006" +
    "\000\002\024\005\000\002\024\011\000\002\024\005\000" +
    "\002\024\006\000\002\024\006\000\002\024\006\000\002" +
    "\024\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\004\000" +
    "\002\015\005\000\002\015\004\000\002\016\004\000\002" +
    "\016\003\000\002\017\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\003\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\034\002\uffa3\007\011\013\021\017\006\021" +
    "\004\022\026\025\023\030\024\032\013\046\014\053\025" +
    "\057\016\074\022\001\002\000\100\004\uffbe\005\uffbe\007" +
    "\uffbe\010\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\021\uffbe" +
    "\022\uffbe\025\uffbe\032\uffbe\033\uffbe\036\uffbe\041\uffbe\043" +
    "\uffbe\044\uffbe\046\uffbe\047\uffbe\051\uffbe\053\uffbe\055\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\001\002\000\036\002\uffa3\007\011" +
    "\012\uffa3\013\021\017\006\021\004\022\026\025\023\030" +
    "\024\032\013\046\014\053\025\057\016\074\022\001\002" +
    "\000\100\004\uffc1\007\126\013\125\017\uffc1\021\uffc1\022" +
    "\uffc1\025\uffc1\031\272\032\uffc1\033\uffc1\034\241\035\235" +
    "\036\uffc1\037\242\040\243\041\uffc1\042\247\043\uffc1\044" +
    "\uffc1\045\240\046\uffc1\047\uffc1\050\237\051\uffc1\052\246" +
    "\053\uffc1\054\236\055\uffc1\056\244\057\uffc1\071\273\001" +
    "\002\000\030\004\271\007\034\013\021\017\033\021\004" +
    "\022\026\025\023\032\013\046\014\053\025\057\016\001" +
    "\002\000\004\004\270\001\002\000\040\004\uffa3\007\040" +
    "\013\021\017\221\021\004\022\026\023\037\024\043\025" +
    "\023\032\013\036\044\046\014\053\025\057\016\070\035" +
    "\001\002\000\004\002\220\001\002\000\100\004\uffbb\005" +
    "\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb" +
    "\021\uffbb\022\uffbb\025\uffbb\032\uffbb\033\uffbb\036\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\051\uffbb\053\uffbb" +
    "\055\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002\000\026\007\034" +
    "\013\021\017\033\021\004\022\026\025\023\032\013\046" +
    "\014\053\025\057\016\001\002\000\006\002\ufffd\012\ufffd" +
    "\001\002\000\026\007\034\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\004\002\001\001\002\000\100\004\uffd4\005\uffd4\007" +
    "\uffd4\010\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4" +
    "\022\uffd4\025\uffd4\032\uffd4\033\054\036\047\041\056\043" +
    "\057\044\050\046\uffd4\047\052\051\060\053\051\055\053" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\032\007\034\013\021" +
    "\014\uffa3\017\033\020\174\021\004\022\026\025\023\032" +
    "\013\046\014\053\025\057\016\001\002\000\006\007\144" +
    "\011\143\001\002\000\100\004\uffbc\005\uffbc\007\uffbc\010" +
    "\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc" +
    "\025\uffbc\032\uffbc\033\uffbc\036\uffbc\041\uffbc\043\uffbc\044" +
    "\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc\055\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\030\007\034\013\021\017\033" +
    "\020\032\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\004\017\027\001\002\000\100" +
    "\004\uffbd\005\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\022\uffbd\025\uffbd\032\uffbd\033\uffbd" +
    "\036\uffbd\041\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\053\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000" +
    "\004\053\030\001\002\000\100\004\uffc5\005\uffc5\007\uffc5" +
    "\010\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\022" +
    "\uffc5\025\uffc5\032\uffc5\033\uffc5\036\uffc5\041\uffc5\043\uffc5" +
    "\044\uffc5\046\uffc5\047\uffc5\051\uffc5\053\uffc5\055\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\001\002\000\030\004\142\007\034\013" +
    "\021\017\033\021\004\022\026\025\023\032\013\046\014" +
    "\053\025\057\016\001\002\000\004\004\141\001\002\000" +
    "\100\004\uffc1\005\uffc1\007\126\010\uffc1\013\125\014\uffc1" +
    "\016\uffc1\017\uffc1\021\uffc1\022\uffc1\025\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\041\uffc1\043\uffc1\044\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\001\002" +
    "\000\036\007\040\013\021\017\033\021\004\022\026\023" +
    "\037\024\043\025\023\032\013\036\044\046\014\053\025" +
    "\057\016\070\035\001\002\000\032\007\040\013\021\017" +
    "\033\021\004\022\026\023\037\024\043\025\023\032\013" +
    "\046\014\053\025\057\016\001\002\000\030\007\034\010" +
    "\123\013\021\017\033\021\004\022\026\025\023\032\013" +
    "\046\014\053\025\057\016\001\002\000\014\004\uffa5\005" +
    "\uffa5\010\uffa5\066\uffa5\067\uffa5\001\002\000\036\007\040" +
    "\013\021\017\033\021\004\022\026\023\037\024\043\025" +
    "\023\032\013\036\044\046\014\053\025\057\016\070\035" +
    "\001\002\000\064\007\uffd4\010\uffd4\013\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\025\uffd4\032\uffd4\033\054\036\047\041\056" +
    "\043\057\044\050\046\uffd4\047\052\051\060\053\051\055" +
    "\053\057\uffd4\060\101\061\102\062\104\063\103\064\077" +
    "\065\100\001\002\000\010\010\072\066\073\067\074\001" +
    "\002\000\014\004\uffa4\005\uffa4\010\uffa4\066\uffa4\067\uffa4" +
    "\001\002\000\026\007\034\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\014\004\uffad\005\uffad\010\uffad\066\uffad\067\uffad\001" +
    "\002\000\026\010\055\033\054\036\047\041\056\043\057" +
    "\044\050\047\052\051\060\053\051\055\053\001\002\000" +
    "\026\007\034\013\021\017\033\021\004\022\026\025\023" +
    "\032\013\046\014\053\025\057\016\001\002\000\026\007" +
    "\034\013\021\017\033\021\004\022\026\025\023\032\013" +
    "\046\014\053\025\057\016\001\002\000\026\007\034\013" +
    "\021\017\033\021\004\022\026\025\023\032\013\046\014" +
    "\053\025\057\016\001\002\000\026\007\034\013\021\017" +
    "\033\021\004\022\026\025\023\032\013\046\014\053\025" +
    "\057\016\001\002\000\026\007\034\013\021\017\033\021" +
    "\004\022\026\025\023\032\013\046\014\053\025\057\016" +
    "\001\002\000\026\007\034\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\100\004\uffc8\005\uffc8\007\uffc8\010\uffc8\013\uffc8\014" +
    "\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\025\uffc8\032\uffc8" +
    "\033\uffc8\036\uffc8\041\uffc8\043\uffc8\044\uffc8\046\uffc8\047" +
    "\uffc8\051\uffc8\053\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001" +
    "\002\000\026\007\034\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\026\007\034\013\021\017\033\021\004\022\026\025\023" +
    "\032\013\046\014\053\025\057\016\001\002\000\026\007" +
    "\034\013\021\017\033\021\004\022\026\025\023\032\013" +
    "\046\014\053\025\057\016\001\002\000\100\004\uffcc\005" +
    "\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\022\uffcc\025\uffcc\032\uffcc\033\054\036\047\041" +
    "\056\043\057\044\050\046\uffcc\047\052\051\uffcc\053\uffcc" +
    "\055\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002\000\100\004\uffd0" +
    "\005\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0\016\uffd0\017" +
    "\uffd0\021\uffd0\022\uffd0\025\uffd0\032\uffd0\033\uffd0\036\uffd0" +
    "\041\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\051\uffd0\053" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002\000\100\004" +
    "\uffd1\005\uffd1\007\uffd1\010\uffd1\013\uffd1\014\uffd1\016\uffd1" +
    "\017\uffd1\021\uffd1\022\uffd1\025\uffd1\032\uffd1\033\uffd1\036" +
    "\uffd1\041\uffd1\043\057\044\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\053\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000\100" +
    "\004\uffd3\005\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\022\uffd3\025\uffd3\032\uffd3\033\uffd3" +
    "\036\uffd3\041\056\043\057\044\050\046\uffd3\047\052\051" +
    "\uffd3\053\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000" +
    "\100\004\uffca\005\uffca\007\uffca\010\uffca\013\uffca\014\uffca" +
    "\016\uffca\017\uffca\021\uffca\022\uffca\025\uffca\032\uffca\033" +
    "\054\036\047\041\056\043\057\044\050\046\uffca\047\052" +
    "\051\uffca\053\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001\002" +
    "\000\100\004\uffcd\005\uffcd\007\uffcd\010\uffcd\013\uffcd\014" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\025\uffcd\032\uffcd" +
    "\033\uffcd\036\uffcd\041\uffcd\043\057\044\uffcd\046\uffcd\047" +
    "\uffcd\051\uffcd\053\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\001" +
    "\002\000\100\004\uffcb\005\uffcb\007\uffcb\010\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\025\uffcb\032" +
    "\uffcb\033\054\036\047\041\056\043\057\044\050\046\uffcb" +
    "\047\052\051\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\001\002\000\100\004\uffcf\005\uffcf\007\uffcf\010\uffcf\013" +
    "\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\025\uffcf" +
    "\032\uffcf\033\uffcf\036\uffcf\041\uffcf\043\057\044\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\053\uffcf\055\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\001\002\000\100\004\uffd2\005\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\025" +
    "\uffd2\032\uffd2\033\uffd2\036\uffd2\041\056\043\057\044\050" +
    "\046\uffd2\047\052\051\uffd2\053\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\001\002\000\004\073\114\001\002\000\032\007" +
    "\040\013\021\017\033\021\004\022\026\023\037\024\043" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\032\007\040\013\021\017\033\021\004\022\026\023\037" +
    "\024\043\025\023\032\013\046\014\053\025\057\016\001" +
    "\002\000\014\004\uffaf\005\uffaf\010\uffaf\066\uffaf\067\uffaf" +
    "\001\002\000\040\033\054\036\047\041\056\043\057\044" +
    "\050\047\052\051\060\053\051\055\053\060\101\061\102" +
    "\062\104\063\103\064\077\065\100\001\002\000\026\007" +
    "\034\013\021\017\033\021\004\022\026\025\023\032\013" +
    "\046\014\053\025\057\016\001\002\000\026\007\034\013" +
    "\021\017\033\021\004\022\026\025\023\032\013\046\014" +
    "\053\025\057\016\001\002\000\026\007\034\013\021\017" +
    "\033\021\004\022\026\025\023\032\013\046\014\053\025" +
    "\057\016\001\002\000\026\007\034\013\021\017\033\021" +
    "\004\022\026\025\023\032\013\046\014\053\025\057\016" +
    "\001\002\000\026\007\034\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\026\007\034\013\021\017\033\021\004\022\026\025" +
    "\023\032\013\046\014\053\025\057\016\001\002\000\036" +
    "\004\uffab\005\uffab\010\uffab\033\054\036\047\041\056\043" +
    "\057\044\050\047\052\051\060\053\051\055\053\066\uffab" +
    "\067\uffab\001\002\000\036\004\uffa9\005\uffa9\010\uffa9\033" +
    "\054\036\047\041\056\043\057\044\050\047\052\051\060" +
    "\053\051\055\053\066\uffa9\067\uffa9\001\002\000\036\004" +
    "\uffaa\005\uffaa\010\uffaa\033\054\036\047\041\056\043\057" +
    "\044\050\047\052\051\060\053\051\055\053\066\uffaa\067" +
    "\uffaa\001\002\000\036\004\uffac\005\uffac\010\uffac\033\054" +
    "\036\047\041\056\043\057\044\050\047\052\051\060\053" +
    "\051\055\053\066\uffac\067\uffac\001\002\000\036\004\uffa7" +
    "\005\uffa7\010\uffa7\033\054\036\047\041\056\043\057\044" +
    "\050\047\052\051\060\053\051\055\053\066\uffa7\067\uffa7" +
    "\001\002\000\036\004\uffa8\005\uffa8\010\uffa8\033\054\036" +
    "\047\041\056\043\057\044\050\047\052\051\060\053\051" +
    "\055\053\066\uffa8\067\uffa8\001\002\000\014\004\uffb0\005" +
    "\uffb0\010\uffb0\066\uffb0\067\uffb0\001\002\000\026\007\034" +
    "\013\021\017\033\021\004\022\026\025\023\032\013\046" +
    "\014\053\025\057\016\001\002\000\030\005\116\007\034" +
    "\013\021\017\033\021\004\022\026\025\023\032\013\046" +
    "\014\053\025\057\016\001\002\000\026\007\034\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\100\004\uffd5\005\uffd5\007\uffd5" +
    "\010\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\025\uffd5\032\uffd5\033\054\036\047\041\056\043\057" +
    "\044\050\046\uffd5\047\052\051\060\053\051\055\053\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\uffd5\067\uffd5\001\002\000\074\004\uffc6\005\uffc6\010" +
    "\uffc6\014\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\025\uffc6" +
    "\032\uffc6\033\uffc6\036\uffc6\041\uffc6\043\uffc6\044\uffc6\046" +
    "\014\047\uffc6\051\uffc6\053\025\055\uffc6\057\016\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\001\002\000\010\010\122\066\uffad\067\uffad\001\002" +
    "\000\014\004\uffa6\005\uffa6\010\uffa6\066\uffa6\067\uffa6\001" +
    "\002\000\100\004\uffc7\005\uffc7\007\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\025\uffc7\032" +
    "\uffc7\033\uffc7\036\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\051\uffc7\053\uffc7\055\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\001\002\000\014\004\uffae\005\uffae\010\uffae\066\uffae\067" +
    "\uffae\001\002\000\030\007\034\013\021\017\033\020\136" +
    "\021\004\022\026\025\023\032\013\046\014\053\025\057" +
    "\016\001\002\000\030\007\034\010\uffa3\013\021\017\033" +
    "\021\004\022\026\025\023\032\013\046\014\053\025\057" +
    "\016\001\002\000\032\007\034\010\uffe2\013\021\016\133" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\004\010\uffe1\001\002\000\004" +
    "\010\132\001\002\000\100\004\uffc4\005\uffc4\007\uffc4\010" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4" +
    "\025\uffc4\032\uffc4\033\uffc4\036\uffc4\041\uffc4\043\uffc4\044" +
    "\uffc4\046\uffc4\047\uffc4\051\uffc4\053\uffc4\055\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\001\002\000\030\007\034\010\uffa3\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\004\010\uffe3\001\002\000\030" +
    "\007\034\013\021\014\140\017\033\021\004\022\026\025" +
    "\023\032\013\046\014\053\025\057\016\001\002\000\004" +
    "\014\137\001\002\000\100\004\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3" +
    "\025\uffc3\032\uffc3\033\uffc3\036\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\047\uffc3\051\uffc3\053\uffc3\055\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\001\002\000\100\004\uffc2\005\uffc2\007\uffc2" +
    "\010\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\025\uffc2\032\uffc2\033\uffc2\036\uffc2\041\uffc2\043\uffc2" +
    "\044\uffc2\046\uffc2\047\uffc2\051\uffc2\053\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\001\002\000\046\002\ufff5\007\ufff5\012" +
    "\ufff5\013\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\030\ufff5\032\ufff5\046\ufff5\053\ufff5\057" +
    "\ufff5\070\ufff5\074\ufff5\001\002\000\046\002\ufff4\007\ufff4" +
    "\012\ufff4\013\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\030\ufff4\032\ufff4\046\ufff4\053\ufff4" +
    "\057\ufff4\070\ufff4\074\ufff4\001\002\000\036\007\040\012" +
    "\uffa3\013\021\017\033\021\004\022\026\023\037\024\043" +
    "\025\023\032\013\046\014\053\025\057\016\070\035\001" +
    "\002\000\026\007\034\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\030\007\034\010\146\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\004\011\147\001\002\000\006\012\uffa3\020\150\001\002" +
    "\000\004\005\162\001\002\000\006\012\uffa3\020\150\001" +
    "\002\000\004\012\160\001\002\000\004\012\uffb9\001\002" +
    "\000\034\007\011\013\021\017\006\020\155\021\004\022" +
    "\026\025\023\030\024\032\013\046\014\053\025\057\016" +
    "\074\022\001\002\000\004\005\157\001\002\000\006\012" +
    "\uffb8\020\uffb8\001\002\000\034\007\uffb7\013\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\025\uffb7\030\uffb7\032\uffb7\046" +
    "\uffb7\053\uffb7\057\uffb7\074\uffb7\001\002\000\046\002\ufff7" +
    "\007\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7\046\ufff7" +
    "\053\ufff7\057\ufff7\070\ufff7\074\ufff7\001\002\000\004\012" +
    "\uffba\001\002\000\034\007\uffb6\013\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\025\uffb6\030\uffb6\032\uffb6\046\uffb6\053" +
    "\uffb6\057\uffb6\074\uffb6\001\002\000\004\012\172\001\002" +
    "\000\004\012\uffb4\001\002\000\010\005\170\066\073\067" +
    "\074\001\002\000\036\007\040\012\uffa3\013\021\017\033" +
    "\021\004\022\026\023\037\024\043\025\023\032\013\046" +
    "\014\053\025\057\016\070\035\001\002\000\004\012\uffb5" +
    "\001\002\000\032\007\011\013\021\017\006\021\004\022" +
    "\026\025\023\030\024\032\013\046\014\053\025\057\016" +
    "\074\022\001\002\000\036\007\uffb3\012\uffb3\013\uffb3\017" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\032\uffb3" +
    "\046\uffb3\053\uffb3\057\uffb3\070\uffb3\001\002\000\046\002" +
    "\ufff8\007\ufff8\012\ufff8\013\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\030\ufff8\032\ufff8\046" +
    "\ufff8\053\ufff8\057\ufff8\070\ufff8\074\ufff8\001\002\000\034" +
    "\005\206\007\034\013\021\014\uffd8\016\207\017\033\021" +
    "\004\022\026\025\023\032\013\046\014\053\025\057\016" +
    "\001\002\000\004\015\202\001\002\000\004\014\uffd6\001" +
    "\002\000\004\014\201\001\002\000\004\014\200\001\002" +
    "\000\100\004\uffbf\005\uffbf\007\uffbf\010\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\025\uffbf\032\uffbf" +
    "\033\uffbf\036\uffbf\041\uffbf\043\uffbf\044\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\053\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\001" +
    "\002\000\100\004\uffc0\005\uffc0\007\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\025\uffc0\032" +
    "\uffc0\033\uffc0\036\uffc0\041\uffc0\043\uffc0\044\uffc0\046\uffc0" +
    "\047\uffc0\051\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\001\002\000\026\007\034\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\032\007\034\013\021\014\uffdb\016\204\017\033\021" +
    "\004\022\026\025\023\032\013\046\014\053\025\057\016" +
    "\001\002\000\004\020\174\001\002\000\004\014\uffdc\001" +
    "\002\000\004\017\211\001\002\000\030\007\034\013\021" +
    "\014\uffa3\017\033\021\004\022\026\025\023\032\013\046" +
    "\014\053\025\057\016\001\002\000\004\014\uffda\001\002" +
    "\000\004\072\212\001\002\000\026\007\034\013\021\017" +
    "\033\021\004\022\026\025\023\032\013\046\014\053\025" +
    "\057\016\001\002\000\032\007\034\013\021\014\uffd7\016" +
    "\214\017\033\021\004\022\026\025\023\032\013\046\014" +
    "\053\025\057\016\001\002\000\030\007\034\013\021\014" +
    "\uffa3\017\033\021\004\022\026\025\023\032\013\046\014" +
    "\053\025\057\016\001\002\000\004\014\uffd9\001\002\000" +
    "\100\004\uffc9\005\uffc9\007\uffc9\010\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\025\uffc9\032\uffc9\033" +
    "\uffc9\036\uffc9\041\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\053\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002" +
    "\000\100\004\uffce\005\uffce\007\uffce\010\uffce\013\uffce\014" +
    "\uffce\016\uffce\017\uffce\021\uffce\022\uffce\025\uffce\032\uffce" +
    "\033\uffce\036\uffce\041\uffce\043\uffce\044\uffce\046\uffce\047" +
    "\uffce\051\uffce\053\uffce\055\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001" +
    "\002\000\004\002\000\001\002\000\066\007\126\010\uffc1" +
    "\013\125\017\uffc1\021\uffc1\022\uffc1\025\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\041\uffc1\043\uffc1\044\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\071\266\001\002\000\004" +
    "\004\224\001\002\000\004\004\ufff1\001\002\000\036\004" +
    "\uffa3\007\040\013\021\017\033\021\004\022\026\023\037" +
    "\024\043\025\023\032\013\046\014\053\025\057\016\070" +
    "\035\001\002\000\004\004\uffb1\001\002\000\004\004\230" +
    "\001\002\000\010\004\uffb2\066\073\067\074\001\002\000" +
    "\006\010\uffa3\017\233\001\002\000\004\010\261\001\002" +
    "\000\004\010\ufff0\001\002\000\030\034\241\035\235\037" +
    "\242\040\243\042\247\045\240\050\237\052\246\054\236" +
    "\056\244\071\245\001\002\000\004\010\uffef\001\002\000" +
    "\006\004\uffee\010\uffee\001\002\000\026\007\034\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\026\007\034\013\021\017\033" +
    "\021\004\022\026\025\023\032\013\046\014\053\025\057" +
    "\016\001\002\000\026\007\034\013\021\017\033\021\004" +
    "\022\026\025\023\032\013\046\014\053\025\057\016\001" +
    "\002\000\026\007\034\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\026\007\034\013\021\017\033\021\004\022\026\025\023" +
    "\032\013\046\014\053\025\057\016\001\002\000\006\004" +
    "\uffed\010\uffed\001\002\000\026\007\034\013\021\017\033" +
    "\021\004\022\026\025\023\032\013\046\014\053\025\057" +
    "\016\001\002\000\026\007\034\013\021\017\033\021\004" +
    "\022\026\025\023\032\013\046\014\053\025\057\016\001" +
    "\002\000\026\007\034\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\026\007\034\013\021\017\033\021\004\022\026\025\023" +
    "\032\013\046\014\053\025\057\016\001\002\000\032\004" +
    "\uffe9\007\034\010\uffe9\013\021\017\033\021\004\022\026" +
    "\025\023\032\013\046\014\053\025\057\016\001\002\000" +
    "\032\004\uffe6\007\034\010\uffe6\013\021\017\033\021\004" +
    "\022\026\025\023\032\013\046\014\053\025\057\016\001" +
    "\002\000\032\004\uffec\007\034\010\uffec\013\021\017\033" +
    "\021\004\022\026\025\023\032\013\046\014\053\025\057" +
    "\016\001\002\000\032\004\uffe4\007\034\010\uffe4\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\032\004\uffea\007\034\010\uffea" +
    "\013\021\017\033\021\004\022\026\025\023\032\013\046" +
    "\014\053\025\057\016\001\002\000\032\004\uffeb\007\034" +
    "\010\uffeb\013\021\017\033\021\004\022\026\025\023\032" +
    "\013\046\014\053\025\057\016\001\002\000\032\004\uffe8" +
    "\007\034\010\uffe8\013\021\017\033\021\004\022\026\025" +
    "\023\032\013\046\014\053\025\057\016\001\002\000\032" +
    "\004\uffe7\007\034\010\uffe7\013\021\017\033\021\004\022" +
    "\026\025\023\032\013\046\014\053\025\057\016\001\002" +
    "\000\032\004\uffe5\007\034\010\uffe5\013\021\017\033\021" +
    "\004\022\026\025\023\032\013\046\014\053\025\057\016" +
    "\001\002\000\004\011\263\001\002\000\046\002\ufff6\007" +
    "\ufff6\012\ufff6\013\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\030\ufff6\032\ufff6\046\ufff6\053" +
    "\ufff6\057\ufff6\070\ufff6\074\ufff6\001\002\000\034\007\011" +
    "\012\uffa3\013\021\017\006\021\004\022\026\025\023\030" +
    "\024\032\013\046\014\053\025\057\016\074\022\001\002" +
    "\000\004\012\265\001\002\000\046\002\uffff\007\uffff\012" +
    "\uffff\013\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\030\uffff\032\uffff\046\uffff\053\uffff\057" +
    "\uffff\070\uffff\074\uffff\001\002\000\026\007\034\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\030\004\ufff2\007\034\013\021" +
    "\017\033\021\004\022\026\025\023\032\013\046\014\053" +
    "\025\057\016\001\002\000\046\002\ufffb\007\ufffb\012\ufffb" +
    "\013\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\030\ufffb\032\ufffb\046\ufffb\053\ufffb\057\ufffb" +
    "\070\ufffb\074\ufffb\001\002\000\046\002\ufffc\007\ufffc\012" +
    "\ufffc\013\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\030\ufffc\032\ufffc\046\ufffc\053\ufffc\057" +
    "\ufffc\070\ufffc\074\ufffc\001\002\000\004\004\312\001\002" +
    "\000\026\007\274\013\021\017\033\021\004\022\026\025" +
    "\023\032\013\046\014\053\025\057\016\001\002\000\044" +
    "\005\275\006\300\007\040\010\uffa3\013\021\017\033\021" +
    "\004\022\026\023\037\024\043\025\023\032\013\036\044" +
    "\046\014\053\025\057\016\070\035\001\002\000\004\017" +
    "\311\001\002\000\004\010\307\001\002\000\004\010\uffde" +
    "\001\002\000\004\017\304\001\002\000\006\010\uffdf\016" +
    "\302\001\002\000\006\005\275\010\uffa3\001\002\000\004" +
    "\010\uffe0\001\002\000\004\010\305\001\002\000\004\011" +
    "\263\001\002\000\046\002\ufff9\007\ufff9\012\ufff9\013\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\030\ufff9\032\ufff9\046\ufff9\053\ufff9\057\ufff9\070\ufff9" +
    "\074\ufff9\001\002\000\004\011\263\001\002\000\046\002" +
    "\ufffa\007\ufffa\012\ufffa\013\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\030\ufffa\032\ufffa\046" +
    "\ufffa\053\ufffa\057\ufffa\070\ufffa\074\ufffa\001\002\000\006" +
    "\010\uffdd\016\uffdd\001\002\000\046\002\ufff3\007\ufff3\012" +
    "\ufff3\013\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\030\ufff3\032\ufff3\046\ufff3\053\ufff3\057" +
    "\ufff3\070\ufff3\074\ufff3\001\002\000\006\002\ufffe\012\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\020\002\011\003\016\005\004\006\007\020" +
    "\006\024\017\030\014\001\001\000\002\001\001\000\016" +
    "\003\312\005\004\006\007\020\006\024\017\030\014\001" +
    "\001\000\002\001\001\000\004\024\116\001\001\000\002" +
    "\001\001\000\016\010\221\020\035\022\041\023\044\024" +
    "\040\030\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\216\001\001\000\002\001\001\000\004\024" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\176\012\175\020\172\024\017\030\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\030\024\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\035\022\041\023" +
    "\044\024\040\001\001\000\006\023\123\024\075\001\001" +
    "\000\004\024\116\001\001\000\002\001\001\000\012\020" +
    "\035\022\041\023\120\024\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\070" +
    "\001\001\000\004\024\067\001\001\000\004\024\066\001" +
    "\001\000\004\024\065\001\001\000\004\024\064\001\001" +
    "\000\004\024\063\001\001\000\002\001\001\000\004\024" +
    "\062\001\001\000\004\024\061\001\001\000\004\024\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\112\024\075\001\001\000\006" +
    "\023\074\024\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\111\001\001\000\004\024\110\001\001" +
    "\000\004\024\107\001\001\000\004\024\106\001\001\000" +
    "\004\024\105\001\001\000\004\024\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\114\024\017\001\001\000\004\024\116\001" +
    "\001\000\006\020\117\024\017\001\001\000\002\001\001" +
    "\000\004\024\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\134" +
    "\024\017\001\001\000\012\020\126\024\017\025\130\030" +
    "\127\001\001\000\004\024\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\126\024" +
    "\017\025\133\030\127\001\001\000\002\001\001\000\004" +
    "\024\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\162\017\165\022\164\023\044\024\075\030\163\001" +
    "\001\000\006\020\144\024\017\001\001\000\004\024\116" +
    "\001\001\000\002\001\001\000\012\013\151\014\150\015" +
    "\153\030\152\001\001\000\002\001\001\000\012\013\160" +
    "\014\150\015\153\030\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\155\006\007\020\006\024\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\166\017\165\022\164\023\044\024\075\030\163" +
    "\001\001\000\002\001\001\000\012\005\170\006\007\020" +
    "\006\024\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\202\024\017\001\001\000" +
    "\004\024\116\001\001\000\004\011\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\207\020\172\024" +
    "\017\030\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\212\024\017\001\001\000\004\024\116\001" +
    "\001\000\012\012\214\020\172\024\017\030\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\225\022\226\023\044\024\075\030" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\231\007\230\030\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\257\024\017\001" +
    "\001\000\006\020\256\024\017\001\001\000\006\020\255" +
    "\024\017\001\001\000\006\020\254\024\017\001\001\000" +
    "\006\020\253\024\017\001\001\000\002\001\001\000\006" +
    "\020\252\024\017\001\001\000\006\020\251\024\017\001" +
    "\001\000\006\020\250\024\017\001\001\000\006\020\247" +
    "\024\017\001\001\000\004\024\116\001\001\000\004\024" +
    "\116\001\001\000\004\024\116\001\001\000\004\024\116" +
    "\001\001\000\004\024\116\001\001\000\004\024\116\001" +
    "\001\000\004\024\116\001\001\000\004\024\116\001\001" +
    "\000\004\024\116\001\001\000\004\004\261\001\001\000" +
    "\002\001\001\000\016\003\263\005\004\006\007\020\006" +
    "\024\017\030\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\266\024\017\001\001\000\004\024\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\251\024\017\001\001\000\020\020\035" +
    "\022\041\023\044\024\040\026\300\027\275\030\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\300\027" +
    "\302\030\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\305\001\001\000\002\001\001\000\004\004" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");

		report_error("Syntax error while reading: ", cur_token);

		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector<ICommand> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector<ICommand> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand stmt = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				sl.addElement(stmt);
				RESULT = sl;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector<ICommand> RESULT =null;
		 RESULT = new Vector<ICommand>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpressionCommand(e);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= assignment_statement SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentFunctionCommand(i, l, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IDENTIFIER ASSIGN LPAREN SPREAD IDENTIFIER RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentSpreadFunctionCommand(i, p, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              ICommand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ElsesCommand(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= CASES LPAREN expression_sequence RPAREN LBRACE case_list RBRACE 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Cases> l = (Vector<Cases>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CasesCommand(e, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= LPAREN intialize_statement SEMI loop_condition SEMI stepper RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		ICommand i = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LoopCommand(i, c, s, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= PRINT STRING SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= PRINT expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IDENTIFIER READ SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ReadCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // intialize_statement ::= IDENTIFIER ASSIGN expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new AssignmentExpressionCommand(i, e);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_statement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // intialize_statement ::= empty 
            {
              ICommand RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_statement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stepper ::= assignment_statement 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stepper",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stepper ::= empty 
            {
              ICommand RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stepper",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment_statement ::= IDENTIFIER INCREMENT 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IncrementCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment_statement ::= IDENTIFIER DECREMENT 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DecrementCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment_statement ::= IDENTIFIER ASSIGN expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment_statement ::= IDENTIFIER ASSIGNADD expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentAddExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment_statement ::= IDENTIFIER ASSIGNSUB expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentSubExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment_statement ::= IDENTIFIER ASSIGNTIMES expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentMulExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment_statement ::= IDENTIFIER ASSIGNDIVIDE expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentDivExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment_statement ::= IDENTIFIER ASSIGNMOD expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentModExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment_statement ::= IDENTIFIER ASSIGNAMP expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentAmpExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment_statement ::= IDENTIFIER ASSIGNBAR expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentBarExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment_statement ::= IDENTIFIER ASSIGNCARET expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentInvExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_list ::= expression_sequence COMMA parameter_list 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_list ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_list ::= variable COMMA variable_list 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_list ::= variable 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(v);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_list ::= empty 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dictionary ::= STRING MAP expression_sequence COMMA dictionary 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dictionary ::= STRING MAP expression_sequence 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Hashtable<String,IExpression> l = new Hashtable<String,IExpression>();
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array ::= expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new ArrayInitializationExpression(n, i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // array ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>(); 
				l.addElement(e); 
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new ArrayInitializationExpression(n, i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression_sequence ::= expression_sequence expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_sequence ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression PLUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AdditionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MINUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubtractionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression TIMES expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new MultiplicationExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression EXPONENT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExponentExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression DIVIDE expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DivisionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= RADICAL expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SquareRootExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression MOD expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ModulusExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression AMP expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseAndExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression BAR expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseOrExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression CARET expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseXorExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= TILDE expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseInvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= LPAREN MINUS expression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new InvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= LPAREN expression_sequence RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= LPAREN condition_sequence RPAREN QUERY expression_sequence COLON expression_sequence 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new QueryExpression(c, e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= BAR IDENTIFIER BAR 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(45)); // TODO: returns size of array or absolute of number 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new FunctionExpression(i, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryIndexExpression(i, x); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= IDENTIFIER LBRAK expression_sequence RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayIndexExpression(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= IDENTIFIER 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VariableExpression(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= LBRAK array RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= LBRAK dictionary RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= LONG 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= DOUBLE 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DoubleExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= PI 
            {
              IExpression RESULT =null;
		 RESULT = new DoubleExpression(3.14159); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= NIL 
            {
              IExpression RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_list ::= case case_list 
            {
              Vector<Cases> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Cases> l = (Vector<Cases>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_list ::= empty 
            {
              Vector<Cases> RESULT =null;
		 RESULT = new Vector<Cases>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case ::= case_expressions statement 
            {
              Cases RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Cases(l, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_expressions ::= case_expressions STRING COLON 
            {
              Vector<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
				l.addElement(i);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_expressions ::= STRING COLON 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(i);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector<Elses> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Elses c = (Elses)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_clause_list ::= empty 
            {
              Vector<Elses> RESULT =null;
		 RESULT = new Vector<Elses>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_clause ::= condition_sequence COLON statement 
            {
              Elses RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Elses(c, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // loop_condition ::= condition_sequence 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loop_condition",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // loop_condition ::= empty 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loop_condition",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condition_sequence ::= condition_sequence AND condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalAndExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condition_sequence ::= condition_sequence OR condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalOrExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condition_sequence ::= NOT condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalNotExpression(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condition_sequence ::= condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condition ::= expression EQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condition ::= expression LT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condition ::= expression GT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condition ::= expression LTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanOrEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condition ::= expression GTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanOrEqualsExpression(e1, e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condition ::= expression NOTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condition ::= LPAREN condition RPAREN 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condition ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condition ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(false));	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
