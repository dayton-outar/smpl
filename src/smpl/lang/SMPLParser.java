
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import smpl.sys.*;
import smpl.sys.expressions.*;
import smpl.sys.commands.*;
import smpl.sys.values.Cases;
import smpl.sys.values.Elses;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\006\000\002\005\010\000\002\005\006\000" +
    "\002\005\010\000\002\005\006\000\002\005\011\000\002" +
    "\005\012\000\002\005\005\000\002\005\005\000\002\006" +
    "\007\000\002\006\005\000\002\021\005\000\002\021\003" +
    "\000\002\021\003\000\002\023\005\000\002\023\003\000" +
    "\002\023\003\000\002\022\004\000\002\007\007\000\002" +
    "\007\005\000\002\010\005\000\002\010\011\000\002\010" +
    "\003\000\002\010\007\000\002\010\003\000\002\015\004" +
    "\000\002\015\003\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\004\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\011\004\000\002\011\003\000\002\012\006\000" +
    "\002\013\004\000\002\013\003\000\002\014\006\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\040\002\uffb4\007\012\013\023\017\007\021" +
    "\004\022\031\023\011\024\025\025\026\027\014\043\015" +
    "\050\030\054\016\065\006\071\024\001\002\000\104\004" +
    "\uffca\005\uffca\007\uffca\010\uffca\013\uffca\014\uffca\016\uffca" +
    "\017\uffca\021\uffca\022\uffca\027\uffca\030\uffca\032\uffca\033" +
    "\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043\uffca\044\uffca" +
    "\046\uffca\050\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\070\uffca" +
    "\001\002\000\042\002\uffb4\007\012\012\uffb4\013\023\017" +
    "\007\021\004\022\031\023\011\024\025\025\026\027\014" +
    "\043\015\050\030\054\016\065\006\071\024\001\002\000" +
    "\030\007\125\013\023\017\042\021\004\022\031\023\011" +
    "\024\025\027\014\043\015\050\030\054\016\001\002\000" +
    "\072\004\uffcd\007\077\013\076\017\uffcd\021\uffcd\022\uffcd" +
    "\026\237\027\uffcd\030\uffcd\032\uffcd\033\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\066\240\001\002\000\026\004\236\007\043" +
    "\013\023\017\042\021\004\022\031\027\014\043\015\050" +
    "\030\054\016\001\002\000\016\004\uffb6\005\uffb6\010\uffb6" +
    "\063\uffb6\064\uffb6\070\uffb6\001\002\000\032\007\125\013" +
    "\023\017\216\021\004\022\031\023\011\024\025\027\014" +
    "\033\044\043\015\050\030\054\016\001\002\000\004\002" +
    "\215\001\002\000\104\004\uffc8\005\uffc8\007\uffc8\010\uffc8" +
    "\013\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\027" +
    "\uffc8\030\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\040\uffc8" +
    "\041\uffc8\043\uffc8\044\uffc8\046\uffc8\050\uffc8\052\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\070\uffc8\001\002\000\024\007\043\013" +
    "\023\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\024\007\043\013\023\017\042\021" +
    "\004\022\031\027\014\043\015\050\030\054\016\001\002" +
    "\000\006\002\ufffd\012\ufffd\001\002\000\004\002\001\001" +
    "\002\000\070\004\uffe1\007\uffe1\010\uffe1\013\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\027\uffe1\030\056\032\051\033\050\035" +
    "\057\036\060\040\061\041\052\043\uffe1\044\054\046\062" +
    "\050\053\052\055\054\uffe1\055\145\056\146\057\147\060" +
    "\150\061\143\062\144\001\002\000\010\063\134\064\136" +
    "\070\205\001\002\000\030\007\043\013\023\014\uffb4\017" +
    "\042\020\163\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\006\007\037\011\036\001\002\000" +
    "\016\004\uffb5\005\uffb5\010\uffb5\063\uffb5\064\uffb5\070\uffb5" +
    "\001\002\000\004\020\034\001\002\000\014\004\uffbe\005" +
    "\uffbe\063\uffbe\064\uffbe\070\uffbe\001\002\000\004\017\032" +
    "\001\002\000\104\004\uffc9\005\uffc9\007\uffc9\010\uffc9\013" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\027\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\050\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\070\uffc9\001\002\000\004\050\033\001\002" +
    "\000\104\004\uffd1\005\uffd1\007\uffd1\010\uffd1\013\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\043" +
    "\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\070\uffd1\001\002\000\004\004\035\001\002\000\042" +
    "\002\ufff4\007\ufff4\012\ufff4\013\ufff4\017\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\043\ufff4\050\ufff4" +
    "\054\ufff4\065\ufff4\071\ufff4\001\002\000\034\007\125\012" +
    "\uffb4\013\023\017\042\021\004\022\031\023\011\024\025" +
    "\027\014\043\015\050\030\054\016\065\006\001\002\000" +
    "\024\007\043\013\023\017\042\021\004\022\031\027\014" +
    "\043\015\050\030\054\016\001\002\000\026\007\043\010" +
    "\112\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\062\004\uffe1\005\uffe1\007" +
    "\uffe1\010\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\021\uffe1" +
    "\022\uffe1\027\uffe1\030\056\032\051\033\050\035\057\036" +
    "\060\040\061\041\052\043\uffe1\044\054\046\062\050\053" +
    "\052\055\054\uffe1\001\002\000\104\004\uffcd\005\uffcd\007" +
    "\077\010\uffcd\013\076\014\uffcd\016\uffcd\017\uffcd\021\uffcd" +
    "\022\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\070\uffcd\001\002\000\026" +
    "\007\043\013\023\017\042\021\004\022\031\027\014\033" +
    "\044\043\015\050\030\054\016\001\002\000\024\007\043" +
    "\013\023\017\042\021\004\022\031\027\014\043\015\050" +
    "\030\054\016\001\002\000\026\007\043\010\047\013\023" +
    "\017\042\021\004\022\031\027\014\043\015\050\030\054" +
    "\016\001\002\000\062\004\uffe2\005\uffe2\007\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\027" +
    "\uffe2\030\056\032\051\033\050\035\057\036\060\040\061" +
    "\041\052\043\uffe2\044\054\046\062\050\053\052\055\054" +
    "\uffe2\001\002\000\104\004\uffd2\005\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\044\uffd2\046\uffd2\050\uffd2\052\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\070\uffd2\001\002\000\024\007\043\013" +
    "\023\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\104\004\uffdf\005\uffdf\007\uffdf\010" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf" +
    "\027\uffdf\030\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf\040" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf\050\uffdf\052\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\070\uffdf\001\002\000\024\007\043" +
    "\013\023\017\042\021\004\022\031\027\014\043\015\050" +
    "\030\054\016\001\002\000\024\007\043\013\023\017\042" +
    "\021\004\022\031\027\014\043\015\050\030\054\016\001" +
    "\002\000\024\007\043\013\023\017\042\021\004\022\031" +
    "\027\014\043\015\050\030\054\016\001\002\000\024\007" +
    "\043\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\024\007\043\013\023\017" +
    "\042\021\004\022\031\027\014\043\015\050\030\054\016" +
    "\001\002\000\104\004\uffdd\005\uffdd\007\uffdd\010\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\027\uffdd" +
    "\030\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd\040\uffdd\041" +
    "\uffdd\043\uffdd\044\uffdd\046\uffdd\050\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\070\uffdd\001\002\000\024\007\043\013\023" +
    "\017\042\021\004\022\031\027\014\043\015\050\030\054" +
    "\016\001\002\000\024\007\043\013\023\017\042\021\004" +
    "\022\031\027\014\043\015\050\030\054\016\001\002\000" +
    "\024\007\043\013\023\017\042\021\004\022\031\027\014" +
    "\043\015\050\030\054\016\001\002\000\104\004\uffd7\005" +
    "\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\021\uffd7\022\uffd7\027\uffd7\030\056\032\051\033\050\035" +
    "\057\036\060\040\061\041\052\043\uffd7\044\054\046\uffd7" +
    "\050\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\070\uffd7\001\002" +
    "\000\104\004\uffdb\005\uffdb\007\uffdb\010\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\027\uffdb\030\uffdb" +
    "\032\uffdb\033\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\043" +
    "\uffdb\044\uffdb\046\uffdb\050\uffdb\052\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\070\uffdb\001\002\000\104\004\uffdc\005\uffdc\007\uffdc" +
    "\010\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\021\uffdc\022" +
    "\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc" +
    "\040\061\041\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc\052" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\070\uffdc\001\002\000\104\004" +
    "\uffe0\005\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\027\uffe0\030\uffe0\032\051\033" +
    "\uffe0\035\057\036\060\040\061\041\052\043\uffe0\044\054" +
    "\046\uffe0\050\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\070\uffe0" +
    "\001\002\000\104\004\uffd5\005\uffd5\007\uffd5\010\uffd5\013" +
    "\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\027\uffd5" +
    "\030\056\032\051\033\050\035\057\036\060\040\061\041" +
    "\052\043\uffd5\044\054\046\uffd5\050\uffd5\052\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\070\uffd5\001\002\000\104\004\uffd8\005\uffd8" +
    "\007\uffd8\010\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\040\061\041\uffd8\043\uffd8\044\uffd8\046\uffd8\050" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\070\uffd8\001\002\000" +
    "\104\004\uffd6\005\uffd6\007\uffd6\010\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\022\uffd6\027\uffd6\030\056\032" +
    "\051\033\050\035\057\036\060\040\061\041\052\043\uffd6" +
    "\044\054\046\uffd6\050\uffd6\052\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\070\uffd6\001\002\000\104\004\uffda\005\uffda\007\uffda\010" +
    "\uffda\013\uffda\014\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\027\uffda\030\uffda\032\uffda\033\uffda\035\uffda\036\uffda\040" +
    "\061\041\uffda\043\uffda\044\uffda\046\uffda\050\uffda\052\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\070\uffda\001\002\000\104\004\uffde" +
    "\005\uffde\007\uffde\010\uffde\013\uffde\014\uffde\016\uffde\017" +
    "\uffde\021\uffde\022\uffde\027\uffde\030\uffde\032\051\033\uffde" +
    "\035\057\036\060\040\061\041\052\043\uffde\044\054\046" +
    "\uffde\050\uffde\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\070\uffde\001" +
    "\002\000\032\010\075\030\056\032\051\033\050\035\057" +
    "\036\060\040\061\041\052\044\054\046\062\050\053\052" +
    "\055\001\002\000\104\004\uffd3\005\uffd3\007\uffd3\010\uffd3" +
    "\013\uffd3\014\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\043\uffd3\044\uffd3\046\uffd3\050\uffd3\052\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\070\uffd3\001\002\000\026\007\043\013" +
    "\023\017\042\020\107\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\026\007\043\010\uffb4\013" +
    "\023\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\030\007\043\010\uffef\013\023\016" +
    "\104\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\004\010\uffee\001\002\000\004\010" +
    "\103\001\002\000\104\004\uffd0\005\uffd0\007\uffd0\010\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\027" +
    "\uffd0\030\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0" +
    "\041\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\070\uffd0\001\002\000\026\007\043\010" +
    "\uffb4\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\004\010\ufff0\001\002\000" +
    "\026\007\043\013\023\014\111\017\042\021\004\022\031" +
    "\027\014\043\015\050\030\054\016\001\002\000\004\014" +
    "\110\001\002\000\104\004\uffcf\005\uffcf\007\uffcf\010\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\027" +
    "\uffcf\030\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\040\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\046\uffcf\050\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\070\uffcf\001\002\000\104\004\uffce\005" +
    "\uffce\007\uffce\010\uffce\013\uffce\014\uffce\016\uffce\017\uffce" +
    "\021\uffce\022\uffce\027\uffce\030\uffce\032\uffce\033\uffce\035" +
    "\uffce\036\uffce\040\uffce\041\uffce\043\uffce\044\uffce\046\uffce" +
    "\050\uffce\052\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\070\uffce\001\002" +
    "\000\004\011\113\001\002\000\006\012\uffb4\020\114\001" +
    "\002\000\004\005\122\001\002\000\006\012\uffb4\020\114" +
    "\001\002\000\004\012\120\001\002\000\004\012\uffc6\001" +
    "\002\000\042\002\ufff6\007\ufff6\012\ufff6\013\ufff6\017\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\027\ufff6\043" +
    "\ufff6\050\ufff6\054\ufff6\065\ufff6\071\ufff6\001\002\000\004" +
    "\012\uffc7\001\002\000\024\007\043\013\023\017\042\021" +
    "\004\022\031\027\014\043\015\050\030\054\016\001\002" +
    "\000\026\004\124\007\043\013\023\017\042\021\004\022" +
    "\031\027\014\043\015\050\030\054\016\001\002\000\006" +
    "\012\uffc5\020\uffc5\001\002\000\032\007\125\013\023\017" +
    "\042\021\004\022\031\023\011\024\025\027\014\033\044" +
    "\043\015\050\030\054\016\001\002\000\004\012\uffc3\001" +
    "\002\000\004\012\157\001\002\000\044\030\056\032\051" +
    "\033\050\035\057\036\060\040\061\041\052\044\054\046" +
    "\062\050\053\052\055\055\145\056\146\057\147\060\150" +
    "\061\143\062\144\001\002\000\010\005\135\063\134\064" +
    "\136\001\002\000\034\007\125\012\uffb4\013\023\017\042" +
    "\021\004\022\031\023\011\024\025\027\014\043\015\050" +
    "\030\054\016\065\006\001\002\000\004\012\uffc4\001\002" +
    "\000\030\007\125\013\023\017\042\021\004\022\031\023" +
    "\011\024\025\027\014\043\015\050\030\054\016\001\002" +
    "\000\024\007\043\013\023\017\042\021\004\022\031\027" +
    "\014\043\015\050\030\054\016\001\002\000\030\007\125" +
    "\013\023\017\042\021\004\022\031\023\011\024\025\027" +
    "\014\043\015\050\030\054\016\001\002\000\014\004\uffc0" +
    "\005\uffc0\063\uffc0\064\uffc0\070\uffc0\001\002\000\026\004" +
    "\141\007\043\013\023\017\042\021\004\022\031\027\014" +
    "\043\015\050\030\054\016\001\002\000\034\007\uffc2\012" +
    "\uffc2\013\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\027\uffc2\043\uffc2\050\uffc2\054\uffc2\065\uffc2\001\002\000" +
    "\014\004\uffc1\005\uffc1\063\uffc1\064\uffc1\070\uffc1\001\002" +
    "\000\024\007\043\013\023\017\042\021\004\022\031\027" +
    "\014\043\015\050\030\054\016\001\002\000\024\007\043" +
    "\013\023\017\042\021\004\022\031\027\014\043\015\050" +
    "\030\054\016\001\002\000\024\007\043\013\023\017\042" +
    "\021\004\022\031\027\014\043\015\050\030\054\016\001" +
    "\002\000\024\007\043\013\023\017\042\021\004\022\031" +
    "\027\014\043\015\050\030\054\016\001\002\000\024\007" +
    "\043\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\024\007\043\013\023\017" +
    "\042\021\004\022\031\027\014\043\015\050\030\054\016" +
    "\001\002\000\044\004\uffba\005\uffba\010\uffba\030\056\032" +
    "\051\033\050\035\057\036\060\040\061\041\052\044\054" +
    "\046\062\050\053\052\055\063\uffba\064\uffba\070\uffba\001" +
    "\002\000\044\004\uffbc\005\uffbc\010\uffbc\030\056\032\051" +
    "\033\050\035\057\036\060\040\061\041\052\044\054\046" +
    "\062\050\053\052\055\063\uffbc\064\uffbc\070\uffbc\001\002" +
    "\000\044\004\uffbb\005\uffbb\010\uffbb\030\056\032\051\033" +
    "\050\035\057\036\060\040\061\041\052\044\054\046\062" +
    "\050\053\052\055\063\uffbb\064\uffbb\070\uffbb\001\002\000" +
    "\044\004\uffbd\005\uffbd\010\uffbd\030\056\032\051\033\050" +
    "\035\057\036\060\040\061\041\052\044\054\046\062\050" +
    "\053\052\055\063\uffbd\064\uffbd\070\uffbd\001\002\000\044" +
    "\004\uffb8\005\uffb8\010\uffb8\030\056\032\051\033\050\035" +
    "\057\036\060\040\061\041\052\044\054\046\062\050\053" +
    "\052\055\063\uffb8\064\uffb8\070\uffb8\001\002\000\044\004" +
    "\uffb9\005\uffb9\010\uffb9\030\056\032\051\033\050\035\057" +
    "\036\060\040\061\041\052\044\054\046\062\050\053\052" +
    "\055\063\uffb9\064\uffb9\070\uffb9\001\002\000\042\002\ufff7" +
    "\007\ufff7\012\ufff7\013\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\027\ufff7\043\ufff7\050\ufff7\054\ufff7" +
    "\065\ufff7\071\ufff7\001\002\000\004\010\161\001\002\000" +
    "\016\004\uffb7\005\uffb7\010\uffb7\063\uffb7\064\uffb7\070\uffb7" +
    "\001\002\000\032\005\175\007\043\013\023\014\uffe5\016" +
    "\176\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\004\015\171\001\002\000\004\014" +
    "\uffe3\001\002\000\004\014\170\001\002\000\004\014\167" +
    "\001\002\000\104\004\uffcb\005\uffcb\007\uffcb\010\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\027\uffcb" +
    "\030\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb\052\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\070\uffcb\001\002\000\104\004\uffcc\005\uffcc" +
    "\007\uffcc\010\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\022\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\035\uffcc" +
    "\036\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\046\uffcc\050" +
    "\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\070\uffcc\001\002\000" +
    "\024\007\043\013\023\017\042\021\004\022\031\027\014" +
    "\043\015\050\030\054\016\001\002\000\030\007\043\013" +
    "\023\014\uffe8\016\173\017\042\021\004\022\031\027\014" +
    "\043\015\050\030\054\016\001\002\000\004\020\163\001" +
    "\002\000\004\014\uffe9\001\002\000\004\017\200\001\002" +
    "\000\026\007\043\013\023\014\uffb4\017\042\021\004\022" +
    "\031\027\014\043\015\050\030\054\016\001\002\000\004" +
    "\014\uffe7\001\002\000\004\067\201\001\002\000\024\007" +
    "\043\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\030\007\043\013\023\014" +
    "\uffe4\016\203\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\026\007\043\013\023\014" +
    "\uffb4\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\004\014\uffe6\001\002\000\024\007" +
    "\043\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\030\004\210\005\207\007" +
    "\043\013\023\017\042\021\004\022\031\027\014\043\015" +
    "\050\030\054\016\001\002\000\024\007\043\013\023\017" +
    "\042\021\004\022\031\027\014\043\015\050\030\054\016" +
    "\001\002\000\042\002\ufff9\007\ufff9\012\ufff9\013\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9" +
    "\043\ufff9\050\ufff9\054\ufff9\065\ufff9\071\ufff9\001\002\000" +
    "\026\004\212\007\043\013\023\017\042\021\004\022\031" +
    "\027\014\043\015\050\030\054\016\001\002\000\042\002" +
    "\ufff8\007\ufff8\012\ufff8\013\ufff8\017\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\027\ufff8\043\ufff8\050\ufff8\054" +
    "\ufff8\065\ufff8\071\ufff8\001\002\000\104\004\uffd4\005\uffd4" +
    "\007\uffd4\010\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\046\uffd4\050" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\070\uffd4\001\002\000" +
    "\104\004\uffd9\005\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\017\uffd9\021\uffd9\022\uffd9\027\uffd9\030\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\052\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\070\uffd9\001\002\000\004\002\000\001\002\000\070\007" +
    "\077\010\uffcd\013\076\017\uffcd\021\uffcd\022\uffcd\027\uffcd" +
    "\030\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\040\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd\052\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\066" +
    "\231\001\002\000\004\004\220\001\002\000\032\007\125" +
    "\013\023\017\042\021\004\022\031\023\011\024\025\027" +
    "\014\043\015\050\030\054\016\065\006\001\002\000\010" +
    "\004\222\063\134\064\136\001\002\000\024\007\043\013" +
    "\023\017\042\021\004\022\031\027\014\043\015\050\030" +
    "\054\016\001\002\000\026\007\043\010\224\013\023\017" +
    "\042\021\004\022\031\027\014\043\015\050\030\054\016" +
    "\001\002\000\004\011\226\001\002\000\042\002\ufff5\007" +
    "\ufff5\012\ufff5\013\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\027\ufff5\043\ufff5\050\ufff5\054\ufff5\065" +
    "\ufff5\071\ufff5\001\002\000\040\007\012\012\uffb4\013\023" +
    "\017\007\021\004\022\031\023\011\024\025\025\026\027" +
    "\014\043\015\050\030\054\016\065\006\071\024\001\002" +
    "\000\004\012\230\001\002\000\042\002\uffff\007\uffff\012" +
    "\uffff\013\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\027\uffff\043\uffff\050\uffff\054\uffff\065\uffff\071" +
    "\uffff\001\002\000\024\007\043\013\023\017\042\021\004" +
    "\022\031\027\014\043\015\050\030\054\016\001\002\000" +
    "\030\004\ufff1\007\043\013\023\016\233\017\042\021\004" +
    "\022\031\027\014\043\015\050\030\054\016\001\002\000" +
    "\004\017\234\001\002\000\004\066\231\001\002\000\004" +
    "\004\ufff2\001\002\000\042\002\ufffc\007\ufffc\012\ufffc\013" +
    "\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\027\ufffc\043\ufffc\050\ufffc\054\ufffc\065\ufffc\071\ufffc\001" +
    "\002\000\004\004\255\001\002\000\024\007\242\013\023" +
    "\017\042\021\004\022\031\027\014\043\015\050\030\054" +
    "\016\001\002\000\026\004\254\007\043\013\023\017\042" +
    "\021\004\022\031\027\014\043\015\050\030\054\016\001" +
    "\002\000\032\005\243\007\043\010\uffb4\013\023\017\042" +
    "\021\004\022\031\027\014\033\044\043\015\050\030\054" +
    "\016\001\002\000\004\017\253\001\002\000\006\010\uffec" +
    "\016\251\001\002\000\004\010\uffeb\001\002\000\004\010" +
    "\247\001\002\000\004\011\226\001\002\000\042\002\ufffa" +
    "\007\ufffa\012\ufffa\013\ufffa\017\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\027\ufffa\043\ufffa\050\ufffa\054\ufffa" +
    "\065\ufffa\071\ufffa\001\002\000\006\005\243\010\uffb4\001" +
    "\002\000\004\010\uffed\001\002\000\006\010\uffea\016\uffea" +
    "\001\002\000\042\002\ufffb\007\ufffb\012\ufffb\013\ufffb\017" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb" +
    "\043\ufffb\050\ufffb\054\ufffb\065\ufffb\071\ufffb\001\002\000" +
    "\042\002\ufff3\007\ufff3\012\ufff3\013\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3\043\ufff3\050" +
    "\ufff3\054\ufff3\065\ufff3\071\ufff3\001\002\000\014\004\uffbf" +
    "\005\uffbf\063\uffbf\064\uffbf\070\uffbf\001\002\000\006\002" +
    "\ufffe\012\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\002\012\003\017\005\004\015\007\016" +
    "\021\017\026\020\020\024\016\001\001\000\002\001\001" +
    "\000\020\003\256\005\004\015\007\016\021\017\026\020" +
    "\020\024\016\001\001\000\006\017\255\020\127\001\001" +
    "\000\002\001\001\000\004\020\045\001\001\000\002\001" +
    "\001\000\012\006\216\015\044\017\157\020\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\213\001" +
    "\001\000\004\020\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\165\010\164\015\161\020\040\024\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\126\014\131\016\130\017\026\020\127\024\125" +
    "\001\001\000\006\015\037\020\040\001\001\000\004\020" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\044\020\040\001\001\000\004\020\073\001\001\000" +
    "\004\020\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\072\001\001\000\002\001\001\000\004\020" +
    "\071\001\001\000\004\020\070\001\001\000\004\020\067" +
    "\001\001\000\004\020\066\001\001\000\004\020\065\001" +
    "\001\000\002\001\001\000\004\020\064\001\001\000\004" +
    "\020\063\001\001\000\004\020\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\105\020\040\001\001\000\012\015" +
    "\077\020\040\021\101\024\100\001\001\000\004\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\077\020\040\021\104\024\100\001\001" +
    "\000\002\001\001\000\004\020\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\115\012\114\024\116\001\001\000\002\001" +
    "\001\000\010\011\120\012\114\024\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\122\020\040\001\001\000\004\020\045" +
    "\001\001\000\002\001\001\000\010\015\044\017\157\020" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\132\014\131\016" +
    "\130\017\026\020\127\024\125\001\001\000\002\001\001" +
    "\000\006\017\141\020\127\001\001\000\006\015\137\020" +
    "\040\001\001\000\006\017\136\020\127\001\001\000\002" +
    "\001\001\000\004\020\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\155\001\001\000\004\020\154" +
    "\001\001\000\004\020\153\001\001\000\004\020\152\001" +
    "\001\000\004\020\151\001\001\000\004\020\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\171\020\040\001\001\000\004\020\045" +
    "\001\001\000\004\007\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\176\015\161\020\040\024\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\201\020\040\001\001\000\004\020\045\001\001\000\012" +
    "\010\203\015\161\020\040\024\163\001\001\000\002\001" +
    "\001\000\006\015\205\020\040\001\001\000\004\020\045" +
    "\001\001\000\006\015\210\020\040\001\001\000\002\001" +
    "\001\000\004\020\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\220\017\026\020\127" +
    "\001\001\000\002\001\001\000\006\015\222\020\040\001" +
    "\001\000\004\020\045\001\001\000\004\004\224\001\001" +
    "\000\002\001\001\000\020\003\226\005\004\015\007\016" +
    "\021\017\026\020\020\024\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\231\020\040\001\001\000" +
    "\004\020\045\001\001\000\004\006\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\240\020\040\001\001\000\004\020\045" +
    "\001\001\000\014\015\044\020\040\022\243\023\245\024" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\247\001\001\000" +
    "\002\001\001\000\010\022\243\023\251\024\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector<ICommand> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector<ICommand> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand stmt = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				sl.addElement(stmt);
				RESULT = sl;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector<ICommand> RESULT =null;
		 RESULT = new Vector<ICommand>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpressionCommand(e);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IDENTIFIER ASSIGN expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentFunctionCommand(i, l, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= condition_sequence QUERY expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IfCommand(c, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= condition_sequence QUERY expression_sequence COLON expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IfElseCommand(c, e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              ICommand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ElsesCommand(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= CASES LPAREN expression_sequence RPAREN LBRACE case_list RBRACE 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CasesCommand(e, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= LPAREN intialize_list SEMI condition_sequence SEMI expression_sequence RPAREN statement_block 
            {
              ICommand RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		Vector<ICommand> il = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LoopCommand(il, c, e, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= PRINT STRING SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IDENTIFIER READ SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ReadCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // intialize_list ::= IDENTIFIER ASSIGN expression_sequence COMMA intialize_list 
            {
              Vector<ICommand> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new AssignmentExpressionCommand(i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // intialize_list ::= IDENTIFIER ASSIGN expression_sequence 
            {
              Vector<ICommand> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<ICommand> l = new Vector<ICommand>();
				l.addElement(new AssignmentExpressionCommand(i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter_list ::= expression_sequence COMMA parameter_list 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameter_list ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameter_list ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_list ::= variable COMMA variable_list 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_list ::= variable 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(v);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_list ::= empty 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dictionary ::= STRING MAP expression_sequence COMMA dictionary 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dictionary ::= STRING MAP expression_sequence 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Hashtable<String,IExpression> l = new Hashtable<String,IExpression>();
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array ::= expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new ArrayInitializationExpression(n, i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>(); 
				l.addElement(e); 
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new ArrayInitializationExpression(n, i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression_sequence ::= expression_sequence expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression_sequence ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression PLUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AdditionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression INCREMENT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IncrementExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression MINUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubtractionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression DECREMENT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DecrementExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression TIMES expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new MultiplicationExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression EXPONENT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExponentExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression DIVIDE expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DivisionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= RADICAL expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SquareRootExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression MOD expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ModulusExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression AMP expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseAndExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression BAR expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseOrExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression CARET expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseXorExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= TILDE expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseInvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= LPAREN MINUS expression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new InvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= LPAREN expression_sequence RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= BAR IDENTIFIER BAR 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(45)); // returns size of array or absolute of number 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new FunctionExpression(i, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryIndexExpression(i, x); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= IDENTIFIER LBRAK expression_sequence RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayIndexExpression(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= IDENTIFIER 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VariableExpression(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LBRAK array RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LBRAK dictionary RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LONG 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= DOUBLE 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DoubleExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= NIL 
            {
              IExpression RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case_list ::= case case_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // case_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector<Cases>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case ::= STRING COLON expression_sequence SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Cases(s, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector<Elses> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Elses c = (Elses)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_clause_list ::= empty 
            {
              Vector<Elses> RESULT =null;
		 RESULT = new Vector<Elses>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_clause ::= condition_sequence COLON expression_sequence SEMI 
            {
              Elses RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Elses(c, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condition_sequence ::= condition_sequence AND condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalAndExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition_sequence ::= condition_sequence OR condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalOrExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition_sequence ::= NOT condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalNotExpression(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condition_sequence ::= condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition ::= expression EQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condition ::= expression LT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= expression GT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= expression LTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanOrEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= expression GTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanOrEqualsExpression(e1, e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expression NOTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition ::= LPAREN condition RPAREN 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(false));	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
