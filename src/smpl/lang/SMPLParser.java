
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import smpl.sys.*;
import smpl.sys.expressions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\006\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\006\000\002\005\010\000\002" +
    "\005\006\000\002\005\011\000\002\005\012\000\002\005" +
    "\006\000\002\005\006\000\002\005\005\000\002\005\005" +
    "\000\002\007\007\000\002\007\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\006\004\000\002\010" +
    "\007\000\002\010\005\000\002\011\005\000\002\011\011" +
    "\000\002\011\003\000\002\011\007\000\002\011\003\000" +
    "\002\016\004\000\002\016\003\000\002\021\005\000\002" +
    "\021\004\000\002\021\005\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\006\000\002" +
    "\021\005\000\002\021\005\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\012\004\000" +
    "\002\012\003\000\002\013\006\000\002\014\004\000\002" +
    "\014\003\000\002\015\006\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\040\002\uffb2\007\011\013\023\017\007\021" +
    "\004\022\031\023\010\024\025\025\026\027\013\043\014" +
    "\050\030\054\016\065\006\071\024\001\002\000\102\004" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\036\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\046\uffc8" +
    "\050\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\070\uffc8\001\002" +
    "\000\042\002\uffb2\007\011\012\uffb2\013\023\017\007\021" +
    "\004\022\031\023\010\024\025\025\026\027\013\043\014" +
    "\050\030\054\016\065\006\071\024\001\002\000\026\007" +
    "\132\017\041\021\004\022\031\023\010\024\025\027\013" +
    "\043\014\050\030\054\016\001\002\000\072\004\uffc9\007" +
    "\112\013\111\017\uffc9\021\uffc9\022\uffc9\026\241\027\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\050\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\066" +
    "\242\001\002\000\016\004\uffb4\005\uffb4\010\uffb4\063\uffb4" +
    "\064\uffb4\070\uffb4\001\002\000\030\007\132\017\221\021" +
    "\004\022\031\023\010\024\025\027\013\033\104\043\014" +
    "\050\030\054\016\001\002\000\004\002\220\001\002\000" +
    "\102\004\uffc6\005\uffc6\007\uffc6\010\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\027\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\050\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\070\uffc6" +
    "\001\002\000\022\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\006\002\ufffd" +
    "\012\ufffd\001\002\000\022\007\042\017\041\021\004\022" +
    "\031\027\013\043\014\050\030\054\016\001\002\000\004" +
    "\002\001\001\002\000\010\063\152\064\154\070\210\001" +
    "\002\000\066\004\uffdd\007\uffdd\010\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\027\uffdd\030\066\032\062\033\060\035\067\036" +
    "\070\040\072\041\061\043\uffdd\044\064\046\071\050\063" +
    "\052\065\054\uffdd\055\137\056\140\057\142\060\141\061" +
    "\135\062\136\001\002\000\024\004\207\007\042\017\041" +
    "\021\004\022\031\027\013\043\014\050\030\054\016\001" +
    "\002\000\026\007\042\014\uffb2\017\041\020\162\021\004" +
    "\022\031\027\013\043\014\050\030\054\016\001\002\000" +
    "\006\007\037\011\036\001\002\000\016\004\uffb3\005\uffb3" +
    "\010\uffb3\063\uffb3\064\uffb3\070\uffb3\001\002\000\004\020" +
    "\034\001\002\000\014\004\uffbc\005\uffbc\063\uffbc\064\uffbc" +
    "\070\uffbc\001\002\000\004\017\032\001\002\000\102\004" +
    "\uffc7\005\uffc7\007\uffc7\010\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\035" +
    "\uffc7\036\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\050\uffc7\052\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\070\uffc7\001\002" +
    "\000\004\050\033\001\002\000\102\004\uffcd\005\uffcd\007" +
    "\uffcd\010\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd\052\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\070\uffcd\001\002\000\004\004\035" +
    "\001\002\000\042\002\ufff0\007\ufff0\012\ufff0\013\ufff0\017" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0" +
    "\043\ufff0\050\ufff0\054\ufff0\065\ufff0\071\ufff0\001\002\000" +
    "\032\007\132\012\uffb2\017\041\021\004\022\031\023\010" +
    "\024\025\027\013\043\014\050\030\054\016\065\006\001" +
    "\002\000\022\007\042\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\060\004\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\014\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\027\uffdd\030\066\032\062\033\060\035\067\036" +
    "\070\040\072\041\061\043\uffdd\044\064\046\071\050\063" +
    "\052\065\054\uffdd\001\002\000\104\004\uffc9\005\uffc9\007" +
    "\112\010\uffc9\013\111\014\uffc9\016\uffc9\017\uffc9\021\uffc9" +
    "\022\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\035\uffc9\036" +
    "\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\046\uffc9\050\uffc9" +
    "\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\070\uffc9\001\002\000\024" +
    "\007\042\017\041\021\004\022\031\027\013\033\104\043" +
    "\014\050\030\054\016\001\002\000\024\007\042\010\045" +
    "\017\041\021\004\022\031\027\013\043\014\050\030\054" +
    "\016\001\002\000\060\004\uffde\005\uffde\007\uffde\010\uffde" +
    "\014\uffde\016\uffde\017\uffde\021\uffde\022\uffde\027\uffde\030" +
    "\066\032\062\033\060\035\067\036\070\040\072\041\061" +
    "\043\uffde\044\064\046\071\050\063\052\065\054\uffde\001" +
    "\002\000\004\011\046\001\002\000\006\012\uffb2\020\047" +
    "\001\002\000\004\005\055\001\002\000\006\012\uffb2\020" +
    "\047\001\002\000\004\012\053\001\002\000\004\012\uffc4" +
    "\001\002\000\042\002\ufff4\007\ufff4\012\ufff4\013\ufff4\017" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4" +
    "\043\ufff4\050\ufff4\054\ufff4\065\ufff4\071\ufff4\001\002\000" +
    "\004\012\uffc5\001\002\000\022\007\042\017\041\021\004" +
    "\022\031\027\013\043\014\050\030\054\016\001\002\000" +
    "\024\004\057\007\042\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\006\012\uffc3\020" +
    "\uffc3\001\002\000\022\007\042\017\041\021\004\022\031" +
    "\027\013\043\014\050\030\054\016\001\002\000\022\007" +
    "\042\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\102\004\uffdb\005\uffdb\007\uffdb\010" +
    "\uffdb\014\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\027\uffdb" +
    "\030\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\046\uffdb\050\uffdb\052\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\070\uffdb\001\002\000\022\007\042\017\041" +
    "\021\004\022\031\027\013\043\014\050\030\054\016\001" +
    "\002\000\022\007\042\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\022\007\042\017" +
    "\041\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\022\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\102\004\uffd9" +
    "\005\uffd9\007\uffd9\010\uffd9\014\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\035\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9\050" +
    "\uffd9\052\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\070\uffd9\001\002\000" +
    "\022\007\042\017\041\021\004\022\031\027\013\043\014" +
    "\050\030\054\016\001\002\000\022\007\042\017\041\021" +
    "\004\022\031\027\013\043\014\050\030\054\016\001\002" +
    "\000\022\007\042\017\041\021\004\022\031\027\013\043" +
    "\014\050\030\054\016\001\002\000\102\004\uffd7\005\uffd7" +
    "\007\uffd7\010\uffd7\014\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\041\uffd7\043\uffd7\044\uffd7\046\uffd7\050\uffd7\052" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\070\uffd7\001\002\000\102\004" +
    "\uffd3\005\uffd3\007\uffd3\010\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\027\uffd3\030\066\032\062\033\060\035" +
    "\067\036\070\040\072\041\061\043\uffd3\044\064\046\uffd3" +
    "\050\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\070\uffd3\001\002" +
    "\000\102\004\uffd8\005\uffd8\007\uffd8\010\uffd8\014\uffd8\016" +
    "\uffd8\017\uffd8\021\uffd8\022\uffd8\027\uffd8\030\uffd8\032\uffd8" +
    "\033\uffd8\035\uffd8\036\uffd8\040\072\041\uffd8\043\uffd8\044" +
    "\uffd8\046\uffd8\050\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\070" +
    "\uffd8\001\002\000\102\004\uffdc\005\uffdc\007\uffdc\010\uffdc" +
    "\014\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\027\uffdc\030" +
    "\uffdc\032\062\033\uffdc\035\067\036\070\040\072\041\061" +
    "\043\uffdc\044\064\046\uffdc\050\uffdc\052\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\070\uffdc\001\002\000\102\004\uffd1\005\uffd1\007" +
    "\uffd1\010\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1" +
    "\027\uffd1\030\066\032\062\033\060\035\067\036\070\040" +
    "\072\041\061\043\uffd1\044\064\046\uffd1\050\uffd1\052\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\070\uffd1\001\002\000\102\004\uffd4" +
    "\005\uffd4\007\uffd4\010\uffd4\014\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\036\uffd4\040\072\041\uffd4\043\uffd4\044\uffd4\046\uffd4\050" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\070\uffd4\001\002\000" +
    "\102\004\uffd2\005\uffd2\007\uffd2\010\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\027\uffd2\030\066\032\062\033" +
    "\060\035\067\036\070\040\072\041\061\043\uffd2\044\064" +
    "\046\uffd2\050\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\070\uffd2" +
    "\001\002\000\102\004\uffd6\005\uffd6\007\uffd6\010\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\027\uffd6\030\uffd6" +
    "\032\uffd6\033\uffd6\035\uffd6\036\uffd6\040\072\041\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\050\uffd6\052\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\070\uffd6\001\002\000\102\004\uffda\005\uffda\007\uffda" +
    "\010\uffda\014\uffda\016\uffda\017\uffda\021\uffda\022\uffda\027" +
    "\uffda\030\uffda\032\062\033\uffda\035\067\036\070\040\072" +
    "\041\061\043\uffda\044\064\046\uffda\050\uffda\052\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda" +
    "\063\uffda\064\uffda\070\uffda\001\002\000\022\007\042\017" +
    "\041\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\024\007\042\010\106\017\041\021\004\022" +
    "\031\027\013\043\014\050\030\054\016\001\002\000\102" +
    "\004\uffce\005\uffce\007\uffce\010\uffce\014\uffce\016\uffce\017" +
    "\uffce\021\uffce\022\uffce\027\uffce\030\uffce\032\uffce\033\uffce" +
    "\035\uffce\036\uffce\040\uffce\041\uffce\043\uffce\044\uffce\046" +
    "\uffce\050\uffce\052\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\070\uffce\001" +
    "\002\000\032\010\110\030\066\032\062\033\060\035\067" +
    "\036\070\040\072\041\061\044\064\046\071\050\063\052" +
    "\065\001\002\000\102\004\uffcf\005\uffcf\007\uffcf\010\uffcf" +
    "\014\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\027\uffcf\030" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\050\uffcf\052\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\070\uffcf\001\002\000\024\007\042\017\041\020" +
    "\121\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\024\007\042\010\uffb2\017\041\021\004\022" +
    "\031\027\013\043\014\050\030\054\016\001\002\000\004" +
    "\010\uffea\001\002\000\004\010\120\001\002\000\026\007" +
    "\042\010\uffeb\016\116\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\024\007\042\010" +
    "\uffb2\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\004\010\uffec\001\002\000\102\004" +
    "\uffcc\005\uffcc\007\uffcc\010\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\022\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\035" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\050\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\070\uffcc\001\002" +
    "\000\004\014\124\001\002\000\024\007\042\014\123\017" +
    "\041\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\102\004\uffca\005\uffca\007\uffca\010\uffca\014" +
    "\uffca\016\uffca\017\uffca\021\uffca\022\uffca\027\uffca\030\uffca" +
    "\032\uffca\033\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\046\uffca\050\uffca\052\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\070\uffca\001\002\000\102\004\uffcb\005\uffcb\007\uffcb" +
    "\010\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\027" +
    "\uffcb\030\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb" +
    "\041\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb\052\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\070\uffcb\001\002\000\004\012\161\001" +
    "\002\000\010\005\153\063\152\064\154\001\002\000\032" +
    "\007\132\012\uffb2\017\041\021\004\022\031\023\010\024" +
    "\025\027\013\043\014\050\030\054\016\065\006\001\002" +
    "\000\004\012\uffc1\001\002\000\044\030\066\032\062\033" +
    "\060\035\067\036\070\040\072\041\061\044\064\046\071" +
    "\050\063\052\065\055\137\056\140\057\142\060\141\061" +
    "\135\062\136\001\002\000\030\007\132\017\041\021\004" +
    "\022\031\023\010\024\025\027\013\033\104\043\014\050" +
    "\030\054\016\001\002\000\004\010\134\001\002\000\016" +
    "\004\uffb5\005\uffb5\010\uffb5\063\uffb5\064\uffb5\070\uffb5\001" +
    "\002\000\022\007\042\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\022\007\042\017" +
    "\041\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\022\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\022\007\042" +
    "\017\041\021\004\022\031\027\013\043\014\050\030\054" +
    "\016\001\002\000\022\007\042\017\041\021\004\022\031" +
    "\027\013\043\014\050\030\054\016\001\002\000\022\007" +
    "\042\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\044\004\uffba\005\uffba\010\uffba\030" +
    "\066\032\062\033\060\035\067\036\070\040\072\041\061" +
    "\044\064\046\071\050\063\052\065\063\uffba\064\uffba\070" +
    "\uffba\001\002\000\044\004\uffb8\005\uffb8\010\uffb8\030\066" +
    "\032\062\033\060\035\067\036\070\040\072\041\061\044" +
    "\064\046\071\050\063\052\065\063\uffb8\064\uffb8\070\uffb8" +
    "\001\002\000\044\004\uffb9\005\uffb9\010\uffb9\030\066\032" +
    "\062\033\060\035\067\036\070\040\072\041\061\044\064" +
    "\046\071\050\063\052\065\063\uffb9\064\uffb9\070\uffb9\001" +
    "\002\000\044\004\uffbb\005\uffbb\010\uffbb\030\066\032\062" +
    "\033\060\035\067\036\070\040\072\041\061\044\064\046" +
    "\071\050\063\052\065\063\uffbb\064\uffbb\070\uffbb\001\002" +
    "\000\044\004\uffb6\005\uffb6\010\uffb6\030\066\032\062\033" +
    "\060\035\067\036\070\040\072\041\061\044\064\046\071" +
    "\050\063\052\065\063\uffb6\064\uffb6\070\uffb6\001\002\000" +
    "\044\004\uffb7\005\uffb7\010\uffb7\030\066\032\062\033\060" +
    "\035\067\036\070\040\072\041\061\044\064\046\071\050" +
    "\063\052\065\063\uffb7\064\uffb7\070\uffb7\001\002\000\004" +
    "\012\uffc2\001\002\000\026\007\132\017\041\021\004\022" +
    "\031\023\010\024\025\027\013\043\014\050\030\054\016" +
    "\001\002\000\022\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\026\007\132" +
    "\017\041\021\004\022\031\023\010\024\025\027\013\043" +
    "\014\050\030\054\016\001\002\000\014\004\uffbe\005\uffbe" +
    "\063\uffbe\064\uffbe\070\uffbe\001\002\000\024\004\157\007" +
    "\042\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\032\007\uffc0\012\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\027\uffc0\043\uffc0\050\uffc0" +
    "\054\uffc0\065\uffc0\001\002\000\014\004\uffbf\005\uffbf\063" +
    "\uffbf\064\uffbf\070\uffbf\001\002\000\042\002\ufff5\007\ufff5" +
    "\012\ufff5\013\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\043\ufff5\050\ufff5\054\ufff5\065\ufff5" +
    "\071\ufff5\001\002\000\004\015\203\001\002\000\004\014" +
    "\uffdf\001\002\000\004\014\201\001\002\000\004\014\177" +
    "\001\002\000\030\005\167\007\042\014\uffe1\016\170\017" +
    "\041\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\004\017\172\001\002\000\024\007\042\014" +
    "\uffb2\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\004\014\uffe3\001\002\000\004\067" +
    "\173\001\002\000\022\007\042\017\041\021\004\022\031" +
    "\027\013\043\014\050\030\054\016\001\002\000\026\007" +
    "\042\014\uffe0\016\175\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\024\007\042\014" +
    "\uffb2\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\004\014\uffe2\001\002\000\004\004" +
    "\200\001\002\000\042\002\ufff1\007\ufff1\012\ufff1\013\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\043\ufff1\050\ufff1\054\ufff1\065\ufff1\071\ufff1\001\002" +
    "\000\004\004\202\001\002\000\042\002\ufff2\007\ufff2\012" +
    "\ufff2\013\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\027\ufff2\043\ufff2\050\ufff2\054\ufff2\065\ufff2\071" +
    "\ufff2\001\002\000\022\007\042\017\041\021\004\022\031" +
    "\027\013\043\014\050\030\054\016\001\002\000\026\007" +
    "\042\014\uffe4\016\205\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\004\020\162\001" +
    "\002\000\004\014\uffe5\001\002\000\042\002\ufffc\007\ufffc" +
    "\012\ufffc\013\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\027\ufffc\043\ufffc\050\ufffc\054\ufffc\065\ufffc" +
    "\071\ufffc\001\002\000\022\007\042\017\041\021\004\022" +
    "\031\027\013\043\014\050\030\054\016\001\002\000\026" +
    "\004\213\005\212\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\022\007\042" +
    "\017\041\021\004\022\031\027\013\043\014\050\030\054" +
    "\016\001\002\000\042\002\ufff7\007\ufff7\012\ufff7\013\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\027" +
    "\ufff7\043\ufff7\050\ufff7\054\ufff7\065\ufff7\071\ufff7\001\002" +
    "\000\024\004\215\007\042\017\041\021\004\022\031\027" +
    "\013\043\014\050\030\054\016\001\002\000\042\002\ufff6" +
    "\007\ufff6\012\ufff6\013\ufff6\017\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\027\ufff6\043\ufff6\050\ufff6\054\ufff6" +
    "\065\ufff6\071\ufff6\001\002\000\102\004\uffd0\005\uffd0\007" +
    "\uffd0\010\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\070\uffd0\001\002\000\102\004\uffd5" +
    "\005\uffd5\007\uffd5\010\uffd5\014\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\022\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\046\uffd5\050" +
    "\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\070\uffd5\001\002\000" +
    "\004\002\000\001\002\000\070\007\112\010\uffc9\013\111" +
    "\017\uffc9\021\uffc9\022\uffc9\027\uffc9\030\uffc9\032\uffc9\033" +
    "\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\050\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\066\234\001\002\000\004" +
    "\004\223\001\002\000\030\007\132\017\041\021\004\022" +
    "\031\023\010\024\025\027\013\043\014\050\030\054\016" +
    "\065\006\001\002\000\010\004\225\063\152\064\154\001" +
    "\002\000\022\007\042\017\041\021\004\022\031\027\013" +
    "\043\014\050\030\054\016\001\002\000\024\007\042\010" +
    "\227\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\004\011\231\001\002\000\042\002" +
    "\ufff3\007\ufff3\012\ufff3\013\ufff3\017\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\027\ufff3\043\ufff3\050\ufff3\054" +
    "\ufff3\065\ufff3\071\ufff3\001\002\000\040\007\011\012\uffb2" +
    "\013\023\017\007\021\004\022\031\023\010\024\025\025" +
    "\026\027\013\043\014\050\030\054\016\065\006\071\024" +
    "\001\002\000\004\012\233\001\002\000\042\002\uffff\007" +
    "\uffff\012\uffff\013\uffff\017\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\027\uffff\043\uffff\050\uffff\054\uffff\065" +
    "\uffff\071\uffff\001\002\000\022\007\042\017\041\021\004" +
    "\022\031\027\013\043\014\050\030\054\016\001\002\000" +
    "\026\004\uffed\007\042\016\236\017\041\021\004\022\031" +
    "\027\013\043\014\050\030\054\016\001\002\000\004\017" +
    "\237\001\002\000\004\066\234\001\002\000\004\004\uffee" +
    "\001\002\000\004\004\266\001\002\000\024\007\244\013" +
    "\243\017\041\021\004\022\031\027\013\043\014\050\030" +
    "\054\016\001\002\000\026\007\042\014\uffb2\017\041\020" +
    "\162\021\004\022\031\027\013\043\014\050\030\054\016" +
    "\001\002\000\030\005\247\007\042\010\uffb2\017\041\021" +
    "\004\022\031\027\013\033\104\043\014\050\030\054\016" +
    "\001\002\000\024\004\246\007\042\017\041\021\004\022" +
    "\031\027\013\043\014\050\030\054\016\001\002\000\042" +
    "\002\ufffb\007\ufffb\012\ufffb\013\ufffb\017\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\043\ufffb\050\ufffb" +
    "\054\ufffb\065\ufffb\071\ufffb\001\002\000\004\017\257\001" +
    "\002\000\006\010\uffe8\016\255\001\002\000\004\010\uffe7" +
    "\001\002\000\004\010\253\001\002\000\004\011\231\001" +
    "\002\000\042\002\ufff8\007\ufff8\012\ufff8\013\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\043" +
    "\ufff8\050\ufff8\054\ufff8\065\ufff8\071\ufff8\001\002\000\006" +
    "\005\247\010\uffb2\001\002\000\004\010\uffe9\001\002\000" +
    "\006\010\uffe6\016\uffe6\001\002\000\004\014\264\001\002" +
    "\000\004\014\262\001\002\000\004\004\263\001\002\000" +
    "\042\002\ufff9\007\ufff9\012\ufff9\013\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\043\ufff9\050" +
    "\ufff9\054\ufff9\065\ufff9\071\ufff9\001\002\000\004\004\265" +
    "\001\002\000\042\002\ufffa\007\ufffa\012\ufffa\013\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa" +
    "\043\ufffa\050\ufffa\054\ufffa\065\ufffa\071\ufffa\001\002\000" +
    "\042\002\uffef\007\uffef\012\uffef\013\uffef\017\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef\043\uffef\050" +
    "\uffef\054\uffef\065\uffef\071\uffef\001\002\000\014\004\uffbd" +
    "\005\uffbd\063\uffbd\064\uffbd\070\uffbd\001\002\000\006\002" +
    "\ufffe\012\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\022\002\011\003\016\005\004\016\021\017" +
    "\017\020\026\021\020\024\014\001\001\000\002\001\001" +
    "\000\020\003\267\005\004\016\021\017\017\020\026\021" +
    "\020\024\014\001\001\000\006\020\266\021\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\221\016" +
    "\104\020\132\021\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\216\001\001\000\002\001\001\000" +
    "\004\021\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\043\001\001\000\014\010" +
    "\164\011\163\016\165\021\037\024\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\124\015\126\017\125\020\026\021\130\024\127" +
    "\001\001\000\006\016\042\021\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\104\021\037\001\001" +
    "\000\004\021\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\050\013\047\024\051\001\001\000\002" +
    "\001\001\000\010\012\053\013\047\024\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\055\021\037\001\001\000\004\021" +
    "\043\001\001\000\002\001\001\000\004\021\102\001\001" +
    "\000\004\021\101\001\001\000\002\001\001\000\004\021" +
    "\100\001\001\000\004\021\077\001\001\000\004\021\076" +
    "\001\001\000\004\021\075\001\001\000\002\001\001\000" +
    "\004\021\074\001\001\000\004\021\073\001\001\000\004" +
    "\021\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\106\001\001\000\004\021\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\121\021\037\001\001\000\012\016\114\021\037" +
    "\022\113\024\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\043\001\001\000\012\016\114\021\037" +
    "\022\116\024\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\150\015\126\017\125\020\026\021\130" +
    "\024\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\104\020\132\021\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\147\001\001\000\004\021" +
    "\146\001\001\000\004\021\145\001\001\000\004\021\144" +
    "\001\001\000\004\021\143\001\001\000\004\021\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\157\021\130\001\001\000\006" +
    "\016\155\021\037\001\001\000\006\020\154\021\130\001" +
    "\001\000\002\001\001\000\004\021\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\043\001\001\000\002\001\001\000\012\011" +
    "\170\016\165\021\037\024\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\173\021\037\001\001\000" +
    "\004\021\043\001\001\000\012\011\175\016\165\021\037" +
    "\024\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\203\021\037\001\001\000\004\021\043\001\001\000" +
    "\004\010\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\210\021\037\001\001\000\004\021\043\001" +
    "\001\000\006\016\213\021\037\001\001\000\002\001\001" +
    "\000\004\021\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\223\020\026\021\130\001" +
    "\001\000\002\001\001\000\006\016\225\021\037\001\001" +
    "\000\004\021\043\001\001\000\004\004\227\001\001\000" +
    "\002\001\001\000\020\003\231\005\004\016\021\017\017" +
    "\020\026\021\020\024\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\234\021\037\001\001\000\004" +
    "\021\043\001\001\000\004\007\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\244" +
    "\021\037\001\001\000\014\010\260\011\257\016\165\021" +
    "\037\024\162\001\001\000\014\006\247\016\104\021\037" +
    "\023\251\024\250\001\001\000\004\021\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\253\001\001\000" +
    "\002\001\001\000\010\006\247\023\255\024\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 sl.addElement(stmt); RESULT = sl ; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression l = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IDENTIFIER ASSIGN expression_list SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression l = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD " + i + " = " + l + "";	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER ASSIGN LBRAK array RBRAK SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "ARRAY " + i + " = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IDENTIFIER ASSIGN LBRAK dictionary RBRAK SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "DICTIONARY " + i + " = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = "CMD " + i + " = (" + l + ") {\n" + sl + "\n}"; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= condition_list QUERY expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression l = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD condition ? " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= condition_list QUERY expression_list COLON expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		IExpression l = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD condition ? " + e1 + " : " + e2; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "IF-ELSES " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= CASES LPAREN expression_list RPAREN LBRACE case_list RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CASE ( " + e + " ) " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= LPAREN intialize_list SEMI condition_list SEMI expression_list RPAREN statement_block 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		Vector il = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression cl = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = "LOOP (" + il + "; " + cl + "; " + e + ") {\n" + sl + "\n}"; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= LBRAK array RBRAK SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "ARRAY = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= LBRAK dictionary RBRAK SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "DICTIONARY = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PRINT STRING SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IDENTIFIER READ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "READ INTO " + i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // intialize_list ::= IDENTIFIER ASSIGN expression_list COMMA intialize_list 
            {
              Vector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(i + " = " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // intialize_list ::= IDENTIFIER ASSIGN expression_list 
            {
              Vector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(i + " = " + e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter_list ::= expression_list COMMA parameter_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter_list ::= expression_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_list ::= variable COMMA variable_list 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_list ::= variable 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(v); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dictionary ::= STRING MAP expression_list COMMA dictionary 
            {
              Vector RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(s + " => " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dictionary ::= STRING MAP expression_list 
            {
              Vector RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(s + " => " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array ::= expression_list COMMA array 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array ::= expression_list COLON IDENTIFIER IMPLY expression_list COMMA array 
            {
              Vector RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement("EXPAND " + n + " " + i + " -> "); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array ::= expression_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array ::= expression_list COLON IDENTIFIER IMPLY expression_list 
            {
              Vector RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement("EXPAND " + n + " " + i + " -> "); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_list ::= expression_list expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_list ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression PLUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AdditionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression INCREMENT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IncrementExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression MINUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubtractionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression DECREMENT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DecrementExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression TIMES expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new MultiplicationExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression EXPONENT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExponentExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression DIVIDE expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DivisionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= RADICAL expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SquareRootExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression MOD expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ModulusExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AMP expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 & e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression BAR expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 | e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression CARET expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 ^ e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= TILDE expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ~e;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LPAREN MINUS expression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = -e;				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= LPAREN expression_list RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= BAR IDENTIFIER BAR 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(45)); // returns size of array or absolute of number 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(5)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		 RESULT = new LongExpression(Long.valueOf(7)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= IDENTIFIER LBRAK expression_list RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(1)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= IDENTIFIER 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(Long.valueOf(2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= LONG 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= DOUBLE 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DoubleExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NIL 
            {
              IExpression RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case_list ::= case case_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(c); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // case_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // case ::= STRING COLON expression_list SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CASE " + s + ": " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(c); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_clause_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_clause ::= condition_list COLON expression_list SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "IF-ELSE " + c + ": " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition_list ::= condition_list AND condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (c1 && c2);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condition_list ::= condition_list OR condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (c1 || c2);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition_list ::= NOT condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (!c);		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condition_list ::= condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= expression EQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1.equals(e2));
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= expression LT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 < e2); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= expression GT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 > e2); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expression LTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 <= e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition ::= expression GTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 >= e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= expression NOTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 != e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= LPAREN condition RPAREN 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condition ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = true;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condition ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = false;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
