
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import smpl.sys.*;
import smpl.sys.expressions.*;
import smpl.sys.commands.*;
import smpl.sys.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\010\000\002\005\011" +
    "\000\002\005\006\000\002\005\011\000\002\005\012\000" +
    "\002\005\005\000\002\005\005\000\002\006\007\000\002" +
    "\006\005\000\002\021\005\000\002\021\003\000\002\021" +
    "\003\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\022\004\000\002\007\007\000\002\007\005\000" +
    "\002\010\005\000\002\010\011\000\002\010\003\000\002" +
    "\010\007\000\002\010\003\000\002\015\004\000\002\015" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\006\000\002\020" +
    "\005\000\002\020\011\000\002\020\005\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\011\004\000\002\011" +
    "\003\000\002\012\006\000\002\013\004\000\002\013\003" +
    "\000\002\014\006\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\032\002\uffac\007\023\013\006\017\021\021" +
    "\005\022\014\025\020\027\010\043\024\050\007\054\013" +
    "\071\016\001\002\000\026\004\315\007\027\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\102\004\uffc2\005\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\014\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\027\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\044\uffc2\046\uffc2\050\uffc2\052\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\001\002\000\030\007\027\013\006\014\uffac" +
    "\017\026\020\273\021\005\022\014\027\010\043\024\050" +
    "\007\054\013\001\002\000\004\017\270\001\002\000\102" +
    "\004\uffc0\005\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\022\uffc0\027\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0\043\uffc0\044" +
    "\uffc0\046\uffc0\050\uffc0\052\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001" +
    "\002\000\004\002\267\001\002\000\006\002\ufffd\012\ufffd" +
    "\001\002\000\024\007\027\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\102" +
    "\004\uffc1\005\uffc1\007\uffc1\010\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\022\uffc1\027\uffc1\030\uffc1\032\uffc1" +
    "\033\uffc1\035\uffc1\036\uffc1\040\uffc1\041\uffc1\043\uffc1\044" +
    "\uffc1\046\uffc1\050\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\001" +
    "\002\000\052\004\uffd8\007\uffd8\013\uffd8\017\uffd8\021\uffd8" +
    "\022\uffd8\027\uffd8\030\054\032\262\033\045\035\263\036" +
    "\057\040\061\041\046\043\uffd8\044\051\046\060\050\047" +
    "\052\053\054\uffd8\001\002\000\006\007\234\011\233\001" +
    "\002\000\034\002\uffac\007\023\012\uffac\013\006\017\021" +
    "\021\005\022\014\025\020\027\010\043\024\050\007\054" +
    "\013\071\016\001\002\000\004\020\230\001\002\000\076" +
    "\004\uffc5\007\122\013\121\017\uffc5\021\uffc5\022\uffc5\026" +
    "\155\027\uffc5\030\uffc5\031\161\032\uffc5\033\uffc5\034\162" +
    "\035\uffc5\036\uffc5\037\166\040\uffc5\041\uffc5\042\160\043" +
    "\uffc5\044\uffc5\045\157\046\uffc5\047\165\050\uffc5\051\156" +
    "\052\uffc5\053\163\054\uffc5\066\164\001\002\000\004\002" +
    "\001\001\002\000\034\007\040\013\006\017\135\021\005" +
    "\022\014\023\033\024\035\027\010\033\030\043\024\050" +
    "\007\054\013\065\037\001\002\000\024\007\027\013\006" +
    "\017\026\021\005\022\014\027\010\043\024\050\007\054" +
    "\013\001\002\000\102\004\uffd2\005\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\044\uffd2\046\uffd2\050\uffd2\052\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\001\002\000\102\004\uffc5\005\uffc5\007" +
    "\122\010\uffc5\013\121\014\uffc5\016\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\035\uffc5\036" +
    "\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\046\uffc5\050\uffc5" +
    "\052\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\034\007\040" +
    "\013\006\017\026\021\005\022\014\023\033\024\035\027" +
    "\010\033\030\043\024\050\007\054\013\065\037\001\002" +
    "\000\024\007\027\013\006\017\026\021\005\022\014\027" +
    "\010\043\024\050\007\054\013\001\002\000\026\007\027" +
    "\010\116\013\006\017\026\021\005\022\014\027\010\043" +
    "\024\050\007\054\013\001\002\000\014\004\uffb6\005\uffb6" +
    "\010\uffb6\063\uffb6\064\uffb6\001\002\000\014\004\uffae\005" +
    "\uffae\010\uffae\063\uffae\064\uffae\001\002\000\010\010\103" +
    "\063\104\064\105\001\002\000\014\004\uffad\005\uffad\010" +
    "\uffad\063\uffad\064\uffad\001\002\000\062\007\uffd8\010\uffd8" +
    "\013\uffd8\017\uffd8\021\uffd8\022\uffd8\027\uffd8\030\054\033" +
    "\045\036\057\040\061\041\046\043\uffd8\044\051\046\060" +
    "\050\047\052\053\054\uffd8\055\055\056\056\057\063\060" +
    "\062\061\050\062\052\001\002\000\030\007\040\013\006" +
    "\017\026\021\005\022\014\023\033\024\035\027\010\043" +
    "\024\050\007\054\013\001\002\000\034\007\040\013\006" +
    "\017\026\021\005\022\014\023\033\024\035\027\010\033" +
    "\030\043\024\050\007\054\013\065\037\001\002\000\010" +
    "\010\042\063\uffb6\064\uffb6\001\002\000\014\004\uffaf\005" +
    "\uffaf\010\uffaf\063\uffaf\064\uffaf\001\002\000\014\004\uffb7" +
    "\005\uffb7\010\uffb7\063\uffb7\064\uffb7\001\002\000\040\030" +
    "\054\033\045\036\057\040\061\041\046\044\051\046\060" +
    "\050\047\052\053\055\055\056\056\057\063\060\062\061" +
    "\050\062\052\001\002\000\024\007\027\013\006\017\026" +
    "\021\005\022\014\027\010\043\024\050\007\054\013\001" +
    "\002\000\024\007\027\013\006\017\026\021\005\022\014" +
    "\027\010\043\024\050\007\054\013\001\002\000\024\007" +
    "\027\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\024\007\027\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\024\007\027\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\024" +
    "\007\027\013\006\017\026\021\005\022\014\027\010\043" +
    "\024\050\007\054\013\001\002\000\024\007\027\013\006" +
    "\017\026\021\005\022\014\027\010\043\024\050\007\054" +
    "\013\001\002\000\024\007\027\013\006\017\026\021\005" +
    "\022\014\027\010\043\024\050\007\054\013\001\002\000" +
    "\024\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\024\007\027\013" +
    "\006\017\026\021\005\022\014\027\010\043\024\050\007" +
    "\054\013\001\002\000\024\007\027\013\006\017\026\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\024\007\027\013\006\017\026\021\005\022\014\027" +
    "\010\043\024\050\007\054\013\001\002\000\024\007\027" +
    "\013\006\017\026\021\005\022\014\027\010\043\024\050" +
    "\007\054\013\001\002\000\024\007\027\013\006\017\026" +
    "\021\005\022\014\027\010\043\024\050\007\054\013\001" +
    "\002\000\024\007\027\013\006\017\026\021\005\022\014" +
    "\027\010\043\024\050\007\054\013\001\002\000\036\004" +
    "\uffb4\005\uffb4\010\uffb4\030\054\033\045\036\057\040\061" +
    "\041\046\044\051\046\060\050\047\052\053\063\uffb4\064" +
    "\uffb4\001\002\000\036\004\uffb2\005\uffb2\010\uffb2\030\054" +
    "\033\045\036\057\040\061\041\046\044\051\046\060\050" +
    "\047\052\053\063\uffb2\064\uffb2\001\002\000\102\004\uffd4" +
    "\005\uffd4\007\uffd4\010\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\021\uffd4\022\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\036\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\046" +
    "\uffd4\050\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001\002\000" +
    "\102\004\uffd0\005\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\022\uffd0\027\uffd0\030\054\032" +
    "\uffd0\033\045\035\uffd0\036\057\040\061\041\046\043\uffd0" +
    "\044\051\046\uffd0\050\uffd0\052\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\001\002\000\102\004\uffd5\005\uffd5\007\uffd5\010\uffd5\013" +
    "\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\027\uffd5" +
    "\030\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\040\061\041" +
    "\uffd5\043\uffd5\044\uffd5\046\uffd5\050\uffd5\052\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\001\002\000\036\004\uffb3\005\uffb3\010\uffb3" +
    "\030\054\033\045\036\057\040\061\041\046\044\051\046" +
    "\060\050\047\052\053\063\uffb3\064\uffb3\001\002\000\036" +
    "\004\uffb5\005\uffb5\010\uffb5\030\054\033\045\036\057\040" +
    "\061\041\046\044\051\046\060\050\047\052\053\063\uffb5" +
    "\064\uffb5\001\002\000\102\004\uffd7\005\uffd7\007\uffd7\010" +
    "\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\027\uffd7\030\uffd7\032\uffd7\033\uffd7\035\uffd7\036\057\040" +
    "\061\041\046\043\uffd7\044\051\046\uffd7\050\uffd7\052\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\001\002\000\102\004\uffce\005\uffce" +
    "\007\uffce\010\uffce\013\uffce\014\uffce\016\uffce\017\uffce\021" +
    "\uffce\022\uffce\027\uffce\030\054\032\uffce\033\045\035\uffce" +
    "\036\057\040\061\041\046\043\uffce\044\051\046\uffce\050" +
    "\uffce\052\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\001\002\000\036\004" +
    "\uffb0\005\uffb0\010\uffb0\030\054\033\045\036\057\040\061" +
    "\041\046\044\051\046\060\050\047\052\053\063\uffb0\064" +
    "\uffb0\001\002\000\102\004\uffd1\005\uffd1\007\uffd1\010\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\027" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\040\061" +
    "\041\uffd1\043\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\001\002\000\036\004\uffb1\005\uffb1\010" +
    "\uffb1\030\054\033\045\036\057\040\061\041\046\044\051" +
    "\046\060\050\047\052\053\063\uffb1\064\uffb1\001\002\000" +
    "\102\004\uffcf\005\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\022\uffcf\027\uffcf\030\054\032" +
    "\uffcf\033\045\035\uffcf\036\057\040\061\041\046\043\uffcf" +
    "\044\051\046\uffcf\050\uffcf\052\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\001\002\000\102\004\uffd3\005\uffd3\007\uffd3\010\uffd3\013" +
    "\uffd3\014\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\027\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\061\041" +
    "\uffd3\043\uffd3\044\uffd3\046\uffd3\050\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\001\002\000\102\004\uffd6\005\uffd6\007\uffd6" +
    "\010\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\021\uffd6\022" +
    "\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\035\uffd6\036\057" +
    "\040\061\041\046\043\uffd6\044\051\046\uffd6\050\uffd6\052" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\001\002\000\004\070\110\001" +
    "\002\000\030\007\040\013\006\017\026\021\005\022\014" +
    "\023\033\024\035\027\010\043\024\050\007\054\013\001" +
    "\002\000\030\007\040\013\006\017\026\021\005\022\014" +
    "\023\033\024\035\027\010\043\024\050\007\054\013\001" +
    "\002\000\014\004\uffb8\005\uffb8\010\uffb8\063\uffb8\064\uffb8" +
    "\001\002\000\014\004\uffb9\005\uffb9\010\uffb9\063\uffb9\064" +
    "\uffb9\001\002\000\024\007\027\013\006\017\026\021\005" +
    "\022\014\027\010\043\024\050\007\054\013\001\002\000" +
    "\026\005\113\007\027\013\006\017\026\021\005\022\014" +
    "\027\010\043\024\050\007\054\013\001\002\000\102\004" +
    "\uffd8\005\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\027\uffd8\030\054\032\uffd8\033" +
    "\045\035\uffd8\036\057\040\061\041\046\043\uffd8\044\051" +
    "\046\060\050\047\052\053\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\001\002" +
    "\000\024\007\027\013\006\017\026\021\005\022\014\027" +
    "\010\043\024\050\007\054\013\001\002\000\102\004\uffd9" +
    "\005\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\022\uffd9\027\uffd9\030\054\032\uffd9\033\045" +
    "\035\uffd9\036\057\040\061\041\046\043\uffd9\044\051\046" +
    "\060\050\047\052\053\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\076\004\uffca\005\uffca\010\uffca\014\uffca\016\uffca\017\uffca" +
    "\021\uffca\022\uffca\027\uffca\030\uffca\032\uffca\033\uffca\035" +
    "\uffca\036\uffca\040\uffca\041\uffca\043\024\044\uffca\046\uffca" +
    "\050\007\052\uffca\054\013\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001\002\000\102" +
    "\004\uffcb\005\uffcb\007\uffcb\010\uffcb\013\uffcb\014\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\027\uffcb\030\uffcb\032\uffcb" +
    "\033\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\050\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\001" +
    "\002\000\026\010\120\030\054\033\045\036\057\040\061" +
    "\041\046\044\051\046\060\050\047\052\053\001\002\000" +
    "\102\004\uffcc\005\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\043\uffcc" +
    "\044\uffcc\046\uffcc\050\uffcc\052\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\001\002\000\026\007\027\013\006\017\026\020\132\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\026\007\027\010\uffac\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\030" +
    "\007\027\010\uffe6\013\006\016\127\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\004" +
    "\010\uffe5\001\002\000\004\010\126\001\002\000\102\004" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\021\uffc8\022\uffc8\027\uffc8\030\uffc8\032\uffc8\033" +
    "\uffc8\035\uffc8\036\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8" +
    "\046\uffc8\050\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\001\002" +
    "\000\026\007\027\010\uffac\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\004" +
    "\010\uffe7\001\002\000\026\007\027\013\006\014\134\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\004\014\133\001\002\000\102\004\uffc7\005" +
    "\uffc7\007\uffc7\010\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7\035" +
    "\uffc7\036\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\050\uffc7\052\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\102" +
    "\004\uffc6\005\uffc6\007\uffc6\010\uffc6\013\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\027\uffc6\030\uffc6\032\uffc6" +
    "\033\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\043\uffc6\044" +
    "\uffc6\046\uffc6\050\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\001" +
    "\002\000\064\007\122\010\uffc5\013\121\017\uffc5\021\uffc5" +
    "\022\uffc5\027\uffc5\030\uffc5\033\uffc5\036\uffc5\040\uffc5\041" +
    "\uffc5\043\uffc5\044\uffc5\046\uffc5\050\uffc5\052\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\066" +
    "\150\001\002\000\004\004\137\001\002\000\032\007\040" +
    "\013\006\017\026\021\005\022\014\023\033\024\035\027" +
    "\010\043\024\050\007\054\013\065\037\001\002\000\010" +
    "\004\141\063\104\064\105\001\002\000\024\007\027\013" +
    "\006\017\026\021\005\022\014\027\010\043\024\050\007" +
    "\054\013\001\002\000\026\007\027\010\143\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\004\011\145\001\002\000\034\002\uffec\007" +
    "\uffec\012\uffec\013\uffec\017\uffec\021\uffec\022\uffec\025\uffec" +
    "\027\uffec\043\uffec\050\uffec\054\uffec\071\uffec\001\002\000" +
    "\032\007\023\012\uffac\013\006\017\021\021\005\022\014" +
    "\025\020\027\010\043\024\050\007\054\013\071\016\001" +
    "\002\000\004\012\147\001\002\000\034\002\uffff\007\uffff" +
    "\012\uffff\013\uffff\017\uffff\021\uffff\022\uffff\025\uffff\027" +
    "\uffff\043\uffff\050\uffff\054\uffff\071\uffff\001\002\000\024" +
    "\007\027\013\006\017\026\021\005\022\014\027\010\043" +
    "\024\050\007\054\013\001\002\000\030\004\uffe8\007\027" +
    "\013\006\016\152\017\026\021\005\022\014\027\010\043" +
    "\024\050\007\054\013\001\002\000\004\017\153\001\002" +
    "\000\004\066\150\001\002\000\004\004\uffe9\001\002\000" +
    "\004\004\227\001\002\000\024\007\027\013\006\017\026" +
    "\021\005\022\014\027\010\043\024\050\007\054\013\001" +
    "\002\000\024\007\027\013\006\017\026\021\005\022\014" +
    "\027\010\043\024\050\007\054\013\001\002\000\024\007" +
    "\027\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\024\007\027\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\024\007\027\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\024" +
    "\007\027\013\006\017\026\021\005\022\014\027\010\043" +
    "\024\050\007\054\013\001\002\000\024\007\174\013\006" +
    "\017\026\021\005\022\014\027\010\043\024\050\007\054" +
    "\013\001\002\000\024\007\027\013\006\017\026\021\005" +
    "\022\014\027\010\043\024\050\007\054\013\001\002\000" +
    "\024\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\026\004\170\007" +
    "\027\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\034\002\ufff6\007\ufff6\012" +
    "\ufff6\013\ufff6\017\ufff6\021\ufff6\022\ufff6\025\ufff6\027\ufff6" +
    "\043\ufff6\050\ufff6\054\ufff6\071\ufff6\001\002\000\026\004" +
    "\172\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\034\002\ufff3\007" +
    "\ufff3\012\ufff3\013\ufff3\017\ufff3\021\ufff3\022\ufff3\025\ufff3" +
    "\027\ufff3\043\ufff3\050\ufff3\054\ufff3\071\ufff3\001\002\000" +
    "\026\004\212\007\027\013\006\017\026\021\005\022\014" +
    "\027\010\043\024\050\007\054\013\001\002\000\042\005" +
    "\176\006\200\007\040\010\uffac\013\006\017\026\021\005" +
    "\022\014\023\033\024\035\027\010\033\030\043\024\050" +
    "\007\054\013\065\037\001\002\000\004\010\210\001\002" +
    "\000\004\017\207\001\002\000\004\010\uffe2\001\002\000" +
    "\004\017\204\001\002\000\006\010\uffe3\016\202\001\002" +
    "\000\006\005\176\010\uffac\001\002\000\004\010\uffe4\001" +
    "\002\000\004\010\205\001\002\000\004\011\145\001\002" +
    "\000\034\002\uffef\007\uffef\012\uffef\013\uffef\017\uffef\021" +
    "\uffef\022\uffef\025\uffef\027\uffef\043\uffef\050\uffef\054\uffef" +
    "\071\uffef\001\002\000\006\010\uffe1\016\uffe1\001\002\000" +
    "\004\011\145\001\002\000\034\002\ufff0\007\ufff0\012\ufff0" +
    "\013\ufff0\017\ufff0\021\ufff0\022\ufff0\025\ufff0\027\ufff0\043" +
    "\ufff0\050\ufff0\054\ufff0\071\ufff0\001\002\000\034\002\ufff9" +
    "\007\ufff9\012\ufff9\013\ufff9\017\ufff9\021\ufff9\022\ufff9\025" +
    "\ufff9\027\ufff9\043\ufff9\050\ufff9\054\ufff9\071\ufff9\001\002" +
    "\000\026\004\214\007\027\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\034" +
    "\002\ufff1\007\ufff1\012\ufff1\013\ufff1\017\ufff1\021\ufff1\022" +
    "\ufff1\025\ufff1\027\ufff1\043\ufff1\050\ufff1\054\ufff1\071\ufff1" +
    "\001\002\000\026\004\216\007\027\013\006\017\026\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\034\002\ufff7\007\ufff7\012\ufff7\013\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\025\ufff7\027\ufff7\043\ufff7\050\ufff7\054\ufff7" +
    "\071\ufff7\001\002\000\026\004\220\007\027\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\034\002\ufff8\007\ufff8\012\ufff8\013\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\025\ufff8\027\ufff8\043\ufff8\050\ufff8" +
    "\054\ufff8\071\ufff8\001\002\000\026\004\222\007\027\013" +
    "\006\017\026\021\005\022\014\027\010\043\024\050\007" +
    "\054\013\001\002\000\034\002\ufff5\007\ufff5\012\ufff5\013" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\025\ufff5\027\ufff5\043\ufff5" +
    "\050\ufff5\054\ufff5\071\ufff5\001\002\000\026\004\224\007" +
    "\027\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\034\002\ufff4\007\ufff4\012" +
    "\ufff4\013\ufff4\017\ufff4\021\ufff4\022\ufff4\025\ufff4\027\ufff4" +
    "\043\ufff4\050\ufff4\054\ufff4\071\ufff4\001\002\000\026\004" +
    "\226\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\034\002\ufff2\007" +
    "\ufff2\012\ufff2\013\ufff2\017\ufff2\021\ufff2\022\ufff2\025\ufff2" +
    "\027\ufff2\043\ufff2\050\ufff2\054\ufff2\071\ufff2\001\002\000" +
    "\034\002\uffea\007\uffea\012\uffea\013\uffea\017\uffea\021\uffea" +
    "\022\uffea\025\uffea\027\uffea\043\uffea\050\uffea\054\uffea\071" +
    "\uffea\001\002\000\004\004\231\001\002\000\034\002\uffeb" +
    "\007\uffeb\012\uffeb\013\uffeb\017\uffeb\021\uffeb\022\uffeb\025" +
    "\uffeb\027\uffeb\043\uffeb\050\uffeb\054\uffeb\071\uffeb\001\002" +
    "\000\006\002\ufffe\012\ufffe\001\002\000\034\007\040\012" +
    "\uffac\013\006\017\026\021\005\022\014\023\033\024\035" +
    "\027\010\043\024\050\007\054\013\065\037\001\002\000" +
    "\024\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\026\007\027\010" +
    "\236\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\004\011\237\001\002\000" +
    "\006\012\uffac\020\240\001\002\000\004\005\246\001\002" +
    "\000\006\012\uffac\020\240\001\002\000\004\012\244\001" +
    "\002\000\004\012\uffbe\001\002\000\034\002\uffed\007\uffed" +
    "\012\uffed\013\uffed\017\uffed\021\uffed\022\uffed\025\uffed\027" +
    "\uffed\043\uffed\050\uffed\054\uffed\071\uffed\001\002\000\004" +
    "\012\uffbf\001\002\000\024\007\027\013\006\017\026\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\026\004\250\007\027\013\006\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\006" +
    "\012\uffbd\020\uffbd\001\002\000\004\012\uffbb\001\002\000" +
    "\004\012\261\001\002\000\010\005\256\063\104\064\105" +
    "\001\002\000\034\007\040\012\uffac\013\006\017\026\021" +
    "\005\022\014\023\033\024\035\027\010\043\024\050\007" +
    "\054\013\065\037\001\002\000\004\012\uffbc\001\002\000" +
    "\024\007\027\013\006\017\026\021\005\022\014\027\010" +
    "\043\024\050\007\054\013\001\002\000\026\004\260\007" +
    "\027\013\006\017\026\021\005\022\014\027\010\043\024" +
    "\050\007\054\013\001\002\000\034\007\uffba\012\uffba\013" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027\uffba" +
    "\043\uffba\050\uffba\054\uffba\065\uffba\001\002\000\034\002" +
    "\uffee\007\uffee\012\uffee\013\uffee\017\uffee\021\uffee\022\uffee" +
    "\025\uffee\027\uffee\043\uffee\050\uffee\054\uffee\071\uffee\001" +
    "\002\000\004\004\265\001\002\000\004\004\264\001\002" +
    "\000\034\002\ufffa\007\ufffa\012\ufffa\013\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\025\ufffa\027\ufffa\043\ufffa\050\ufffa\054\ufffa" +
    "\071\ufffa\001\002\000\034\002\ufffb\007\ufffb\012\ufffb\013" +
    "\ufffb\017\ufffb\021\ufffb\022\ufffb\025\ufffb\027\ufffb\043\ufffb" +
    "\050\ufffb\054\ufffb\071\ufffb\001\002\000\102\004\uffcd\005" +
    "\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\036\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd" +
    "\050\uffcd\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000\004" +
    "\002\000\001\002\000\004\050\271\001\002\000\102\004" +
    "\uffc9\005\uffc9\007\uffc9\010\uffc9\013\uffc9\014\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\027\uffc9\030\uffc9\032\uffc9\033" +
    "\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\050\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002" +
    "\000\032\005\305\007\027\013\006\014\uffdc\016\306\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\004\015\301\001\002\000\004\014\uffda\001" +
    "\002\000\004\014\300\001\002\000\004\014\277\001\002" +
    "\000\102\004\uffc3\005\uffc3\007\uffc3\010\uffc3\013\uffc3\014" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\027\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\035\uffc3\036\uffc3\040\uffc3\041\uffc3\043" +
    "\uffc3\044\uffc3\046\uffc3\050\uffc3\052\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\001\002\000\102\004\uffc4\005\uffc4\007\uffc4\010\uffc4" +
    "\013\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\027" +
    "\uffc4\030\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\040\uffc4" +
    "\041\uffc4\043\uffc4\044\uffc4\046\uffc4\050\uffc4\052\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\001\002\000\024\007\027\013\006\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\030\007\027\013\006\014\uffdf\016\303\017" +
    "\026\021\005\022\014\027\010\043\024\050\007\054\013" +
    "\001\002\000\004\020\273\001\002\000\004\014\uffe0\001" +
    "\002\000\004\017\310\001\002\000\026\007\027\013\006" +
    "\014\uffac\017\026\021\005\022\014\027\010\043\024\050" +
    "\007\054\013\001\002\000\004\014\uffde\001\002\000\004" +
    "\067\311\001\002\000\024\007\027\013\006\017\026\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\030\007\027\013\006\014\uffdb\016\313\017\026\021" +
    "\005\022\014\027\010\043\024\050\007\054\013\001\002" +
    "\000\026\007\027\013\006\014\uffac\017\026\021\005\022" +
    "\014\027\010\043\024\050\007\054\013\001\002\000\004" +
    "\014\uffdd\001\002\000\034\002\ufffc\007\ufffc\012\ufffc\013" +
    "\ufffc\017\ufffc\021\ufffc\022\ufffc\025\ufffc\027\ufffc\043\ufffc" +
    "\050\ufffc\054\ufffc\071\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\016\002\010\003\021\005\016\015\003\020" +
    "\014\024\011\001\001\000\004\020\113\001\001\000\002" +
    "\001\001\000\014\007\275\010\274\015\271\020\111\024" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\231\005\016\015\003\020\014\024\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\135\015\030\016\033\017\031\020\035\001\001\000" +
    "\004\020\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\030\016\033\017\031\020\035\001\001\000" +
    "\004\020\116\001\001\000\004\020\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\042\020\043\001\001" +
    "\000\012\015\030\016\033\017\040\020\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\101\001\001\000\004\020\100\001" +
    "\001\000\004\020\077\001\001\000\004\020\076\001\001" +
    "\000\004\020\075\001\001\000\004\020\074\001\001\000" +
    "\004\020\073\001\001\000\004\020\072\001\001\000\004" +
    "\020\071\001\001\000\004\020\070\001\001\000\004\020" +
    "\067\001\001\000\004\020\066\001\001\000\004\020\065" +
    "\001\001\000\004\020\064\001\001\000\004\020\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\106\020\043\001\001\000\006\017\105\020" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\110\020\111\001\001\000\004\020\113\001\001\000" +
    "\002\001\001\000\006\015\114\020\111\001\001\000\002" +
    "\001\001\000\004\020\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\130\020\111" +
    "\001\001\000\012\015\122\020\111\021\124\024\123\001" +
    "\001\000\004\020\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\122\020\111\021" +
    "\127\024\123\001\001\000\002\001\001\000\004\020\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\137" +
    "\017\031\020\043\001\001\000\002\001\001\000\006\015" +
    "\141\020\111\001\001\000\004\020\113\001\001\000\004" +
    "\004\143\001\001\000\002\001\001\000\014\003\145\005" +
    "\016\015\003\020\014\024\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\150\020\111\001\001\000" +
    "\004\020\113\001\001\000\004\006\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\224\020\111\001\001\000\006\015\222\020\111\001\001" +
    "\000\006\015\220\020\111\001\001\000\006\015\216\020" +
    "\111\001\001\000\006\015\214\020\111\001\001\000\006" +
    "\015\212\020\111\001\001\000\006\015\172\020\111\001" +
    "\001\000\006\015\170\020\111\001\001\000\006\015\166" +
    "\020\111\001\001\000\004\020\113\001\001\000\002\001" +
    "\001\000\004\020\113\001\001\000\002\001\001\000\004" +
    "\020\113\001\001\000\020\015\030\016\033\017\031\020" +
    "\035\022\200\023\174\024\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\200\023\202\024\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\113\001\001\000\002\001\001\000\004\020\113\001\001" +
    "\000\002\001\001\000\004\020\113\001\001\000\002\001" +
    "\001\000\004\020\113\001\001\000\002\001\001\000\004" +
    "\020\113\001\001\000\002\001\001\000\004\020\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\251\014" +
    "\253\016\252\017\031\020\043\024\250\001\001\000\006" +
    "\015\234\020\111\001\001\000\004\020\113\001\001\000" +
    "\002\001\001\000\010\011\241\012\240\024\242\001\001" +
    "\000\002\001\001\000\010\011\244\012\240\024\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\246\020\111\001\001\000" +
    "\004\020\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\254\014" +
    "\253\016\252\017\031\020\043\024\250\001\001\000\002" +
    "\001\001\000\006\015\256\020\111\001\001\000\004\020" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\301\020" +
    "\111\001\001\000\004\020\113\001\001\000\004\007\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\306\015\271\020\111\024\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\311\020\111\001\001\000" +
    "\004\020\113\001\001\000\012\010\313\015\271\020\111" +
    "\024\273\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector<ICommand> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector<ICommand> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand stmt = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				sl.addElement(stmt);
				RESULT = sl;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector<ICommand> RESULT =null;
		 RESULT = new Vector<ICommand>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpressionCommand(e);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= expression INCREMENT SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new IncrementCommand(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= expression DECREMENT SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new DecrementCommand(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IDENTIFIER ASSIGN expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IDENTIFIER ASSIGNADD expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentAddExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IDENTIFIER ASSIGNSUB expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentSubExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IDENTIFIER ASSIGNTIMES expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentMulExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= IDENTIFIER ASSIGNDIVIDE expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentDivExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IDENTIFIER ASSIGNMOD expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentModExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IDENTIFIER ASSIGNAMP expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentAmpExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IDENTIFIER ASSIGNBAR expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentBarExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= IDENTIFIER ASSIGNCARET expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AssignmentInvExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentFunctionCommand(i, l, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IDENTIFIER ASSIGN LPAREN SPREAD IDENTIFIER RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentSpreadFunctionCommand(i, p, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              ICommand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ElsesCommand(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= CASES LPAREN expression_sequence RPAREN LBRACE case_list RBRACE 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CasesCommand(e, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LPAREN intialize_list SEMI condition_sequence SEMI expression_sequence RPAREN statement_block 
            {
              ICommand RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		Vector<ICommand> il = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LoopCommand(il, c, e, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= PRINT STRING SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= IDENTIFIER READ SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ReadCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // intialize_list ::= IDENTIFIER ASSIGN expression_sequence COMMA intialize_list 
            {
              Vector<ICommand> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new AssignmentExpressionCommand(i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // intialize_list ::= IDENTIFIER ASSIGN expression_sequence 
            {
              Vector<ICommand> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<ICommand> l = new Vector<ICommand>();
				l.addElement(new AssignmentExpressionCommand(i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_list ::= expression_sequence COMMA parameter_list 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_list ::= variable COMMA variable_list 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_list ::= variable 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(v);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable_list ::= empty 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dictionary ::= STRING MAP expression_sequence COMMA dictionary 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dictionary ::= STRING MAP expression_sequence 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Hashtable<String,IExpression> l = new Hashtable<String,IExpression>();
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array ::= expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new ArrayInitializationExpression(n, i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // array ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>(); 
				l.addElement(e); 
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new ArrayInitializationExpression(n, i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_sequence ::= expression_sequence expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_sequence ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression PLUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AdditionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression MINUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubtractionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression TIMES expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new MultiplicationExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression EXPONENT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExponentExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression DIVIDE expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DivisionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= RADICAL expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SquareRootExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MOD expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ModulusExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression AMP expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseAndExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression BAR expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseOrExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression CARET expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseXorExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= TILDE expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseInvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LPAREN MINUS expression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new InvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LPAREN expression_sequence RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LPAREN condition_sequence RPAREN QUERY expression_sequence COLON expression_sequence 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new QueryExpression(c, e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= BAR IDENTIFIER BAR 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new LongExpression(Long.valueOf(45)); // returns size of array or absolute of number 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new FunctionExpression(i, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryIndexExpression(i, x); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= IDENTIFIER LBRAK expression_sequence RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayIndexExpression(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= IDENTIFIER 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VariableExpression(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= LBRAK array RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LBRAK dictionary RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= LONG 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= DOUBLE 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DoubleExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= NIL 
            {
              IExpression RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= case case_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector<Cases>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case ::= STRING COLON expression_sequence SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Cases(s, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector<Elses> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Elses c = (Elses)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_clause_list ::= empty 
            {
              Vector<Elses> RESULT =null;
		 RESULT = new Vector<Elses>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_clause ::= condition_sequence COLON expression_sequence SEMI 
            {
              Elses RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Elses(c, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition_sequence ::= condition_sequence AND condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalAndExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition_sequence ::= condition_sequence OR condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalOrExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition_sequence ::= NOT condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalNotExpression(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition_sequence ::= condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= expression EQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condition ::= expression LT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condition ::= expression GT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condition ::= expression LTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanOrEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condition ::= expression GTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanOrEqualsExpression(e1, e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condition ::= expression NOTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condition ::= LPAREN condition RPAREN 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condition ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condition ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(false));	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
