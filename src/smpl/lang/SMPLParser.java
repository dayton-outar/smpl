
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\006\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\006\000\002\005\010\000\002" +
    "\005\006\000\002\005\011\000\002\005\012\000\002\005" +
    "\006\000\002\005\006\000\002\005\005\000\002\005\005" +
    "\000\002\007\007\000\002\007\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\006\004\000\002\010" +
    "\007\000\002\010\005\000\002\011\005\000\002\011\011" +
    "\000\002\011\003\000\002\011\007\000\002\011\003\000" +
    "\002\016\004\000\002\016\003\000\002\021\005\000\002" +
    "\021\004\000\002\021\005\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\006\000\002" +
    "\021\005\000\002\021\005\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\006\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\036\002\uffb3\007\012\013\023\017\006\021" +
    "\021\022\010\023\025\024\026\026\011\042\007\047\030" +
    "\053\015\064\005\070\024\001\002\000\040\002\uffb3\007" +
    "\012\012\uffb3\013\023\017\006\021\021\022\010\023\025" +
    "\024\026\026\011\042\007\047\030\053\015\064\005\070" +
    "\024\001\002\000\024\007\131\017\040\021\021\022\010" +
    "\023\025\026\011\042\007\047\030\053\015\001\002\000" +
    "\070\004\uffc9\007\111\013\110\017\uffc9\021\uffc9\025\240" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\065\241\001\002\000\020\007\041\017\040\021\021" +
    "\026\011\042\007\047\030\053\015\001\002\000\016\004" +
    "\uffb5\005\uffb5\010\uffb5\062\uffb5\063\uffb5\067\uffb5\001\002" +
    "\000\100\004\uffc7\005\uffc7\007\uffc7\010\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\021\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\034\uffc7\035\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045" +
    "\uffc7\047\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\067\uffc7\001" +
    "\002\000\026\007\131\017\217\021\021\022\010\023\025" +
    "\026\011\032\103\042\007\047\030\053\015\001\002\000" +
    "\004\002\216\001\002\000\006\002\ufffd\012\ufffd\001\002" +
    "\000\020\007\041\017\040\021\021\026\011\042\007\047" +
    "\030\053\015\001\002\000\004\002\001\001\002\000\010" +
    "\062\151\063\153\067\207\001\002\000\064\004\uffdd\007" +
    "\uffdd\010\uffdd\017\uffdd\021\uffdd\026\uffdd\027\065\031\061" +
    "\032\057\034\066\035\067\037\071\040\060\042\uffdd\043" +
    "\063\045\070\047\062\051\064\053\uffdd\054\136\055\137" +
    "\056\141\057\140\060\134\061\135\001\002\000\100\004" +
    "\uffc8\005\uffc8\007\uffc8\010\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\034\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045\uffc8\047\uffc8" +
    "\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\067\uffc8\001\002\000\022" +
    "\004\206\007\041\017\040\021\021\026\011\042\007\047" +
    "\030\053\015\001\002\000\024\007\041\014\uffb3\017\040" +
    "\020\161\021\021\026\011\042\007\047\030\053\015\001" +
    "\002\000\006\007\036\011\035\001\002\000\016\004\uffb4" +
    "\005\uffb4\010\uffb4\062\uffb4\063\uffb4\067\uffb4\001\002\000" +
    "\004\020\033\001\002\000\014\004\uffbd\005\uffbd\062\uffbd" +
    "\063\uffbd\067\uffbd\001\002\000\004\017\031\001\002\000" +
    "\004\047\032\001\002\000\100\004\uffcd\005\uffcd\007\uffcd" +
    "\010\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd" +
    "\042\uffcd\043\uffcd\045\uffcd\047\uffcd\051\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\067\uffcd\001\002\000\004\004\034\001\002\000" +
    "\040\002\ufff0\007\ufff0\012\ufff0\013\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\026\ufff0\042\ufff0\047\ufff0\053" +
    "\ufff0\064\ufff0\070\ufff0\001\002\000\030\007\131\012\uffb3" +
    "\017\040\021\021\022\010\023\025\026\011\042\007\047" +
    "\030\053\015\064\005\001\002\000\020\007\041\017\040" +
    "\021\021\026\011\042\007\047\030\053\015\001\002\000" +
    "\056\004\uffdd\005\uffdd\007\uffdd\010\uffdd\014\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\026\uffdd\027\065\031\061\032\057\034" +
    "\066\035\067\037\071\040\060\042\uffdd\043\063\045\070" +
    "\047\062\051\064\053\uffdd\001\002\000\102\004\uffc9\005" +
    "\uffc9\007\111\010\uffc9\013\110\014\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9" +
    "\051\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\067\uffc9\001\002\000\022" +
    "\007\041\017\040\021\021\026\011\032\103\042\007\047" +
    "\030\053\015\001\002\000\022\007\041\010\044\017\040" +
    "\021\021\026\011\042\007\047\030\053\015\001\002\000" +
    "\056\004\uffde\005\uffde\007\uffde\010\uffde\014\uffde\016\uffde" +
    "\017\uffde\021\uffde\026\uffde\027\065\031\061\032\057\034" +
    "\066\035\067\037\071\040\060\042\uffde\043\063\045\070" +
    "\047\062\051\064\053\uffde\001\002\000\004\011\045\001" +
    "\002\000\006\012\uffb3\020\046\001\002\000\004\005\054" +
    "\001\002\000\006\012\uffb3\020\046\001\002\000\004\012" +
    "\052\001\002\000\004\012\uffc5\001\002\000\040\002\ufff4" +
    "\007\ufff4\012\ufff4\013\ufff4\017\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\026\ufff4\042\ufff4\047\ufff4\053\ufff4\064\ufff4" +
    "\070\ufff4\001\002\000\004\012\uffc6\001\002\000\020\007" +
    "\041\017\040\021\021\026\011\042\007\047\030\053\015" +
    "\001\002\000\022\004\056\007\041\017\040\021\021\026" +
    "\011\042\007\047\030\053\015\001\002\000\006\012\uffc4" +
    "\020\uffc4\001\002\000\020\007\041\017\040\021\021\026" +
    "\011\042\007\047\030\053\015\001\002\000\020\007\041" +
    "\017\040\021\021\026\011\042\007\047\030\053\015\001" +
    "\002\000\100\004\uffdb\005\uffdb\007\uffdb\010\uffdb\014\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\026\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb" +
    "\045\uffdb\047\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\067\uffdb" +
    "\001\002\000\020\007\041\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\020\007\041\017\040" +
    "\021\021\026\011\042\007\047\030\053\015\001\002\000" +
    "\020\007\041\017\040\021\021\026\011\042\007\047\030" +
    "\053\015\001\002\000\020\007\041\017\040\021\021\026" +
    "\011\042\007\047\030\053\015\001\002\000\100\004\uffd9" +
    "\005\uffd9\007\uffd9\010\uffd9\014\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\045\uffd9\047\uffd9\051" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\067\uffd9\001\002\000\020\007" +
    "\041\017\040\021\021\026\011\042\007\047\030\053\015" +
    "\001\002\000\020\007\041\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\020\007\041\017\040" +
    "\021\021\026\011\042\007\047\030\053\015\001\002\000" +
    "\100\004\uffd7\005\uffd7\007\uffd7\010\uffd7\014\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\045\uffd7" +
    "\047\uffd7\051\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\067\uffd7\001\002" +
    "\000\100\004\uffd3\005\uffd3\007\uffd3\010\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\026\uffd3\027\065\031\061\032\057" +
    "\034\066\035\067\037\071\040\060\042\uffd3\043\063\045" +
    "\uffd3\047\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\067\uffd3\001" +
    "\002\000\100\004\uffd8\005\uffd8\007\uffd8\010\uffd8\014\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\026\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\037\071\040\uffd8\042\uffd8\043\uffd8" +
    "\045\uffd8\047\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\067\uffd8" +
    "\001\002\000\100\004\uffdc\005\uffdc\007\uffdc\010\uffdc\014" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\026\uffdc\027\uffdc\031\061" +
    "\032\uffdc\034\066\035\067\037\071\040\060\042\uffdc\043" +
    "\063\045\uffdc\047\uffdc\051\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\067" +
    "\uffdc\001\002\000\100\004\uffd1\005\uffd1\007\uffd1\010\uffd1" +
    "\014\uffd1\016\uffd1\017\uffd1\021\uffd1\026\uffd1\027\065\031" +
    "\061\032\057\034\066\035\067\037\071\040\060\042\uffd1" +
    "\043\063\045\uffd1\047\uffd1\051\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\067\uffd1\001\002\000\100\004\uffd4\005\uffd4\007\uffd4\010" +
    "\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\035\uffd4\037\071\040\uffd4\042" +
    "\uffd4\043\uffd4\045\uffd4\047\uffd4\051\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\067\uffd4\001\002\000\100\004\uffd2\005\uffd2\007\uffd2" +
    "\010\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\026\uffd2\027" +
    "\065\031\061\032\057\034\066\035\067\037\071\040\060" +
    "\042\uffd2\043\063\045\uffd2\047\uffd2\051\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\067\uffd2\001\002\000\100\004\uffd6\005\uffd6\007" +
    "\uffd6\010\uffd6\014\uffd6\016\uffd6\017\uffd6\021\uffd6\026\uffd6" +
    "\027\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\037\071\040" +
    "\uffd6\042\uffd6\043\uffd6\045\uffd6\047\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\067\uffd6\001\002\000\100\004\uffda\005\uffda" +
    "\007\uffda\010\uffda\014\uffda\016\uffda\017\uffda\021\uffda\026" +
    "\uffda\027\uffda\031\061\032\uffda\034\066\035\067\037\071" +
    "\040\060\042\uffda\043\063\045\uffda\047\uffda\051\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\067\uffda\001\002\000\020\007\041\017" +
    "\040\021\021\026\011\042\007\047\030\053\015\001\002" +
    "\000\022\007\041\010\105\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\100\004\uffce\005\uffce" +
    "\007\uffce\010\uffce\014\uffce\016\uffce\017\uffce\021\uffce\026" +
    "\uffce\027\uffce\031\uffce\032\uffce\034\uffce\035\uffce\037\uffce" +
    "\040\uffce\042\uffce\043\uffce\045\uffce\047\uffce\051\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\067\uffce\001\002\000\032\010\107\027" +
    "\065\031\061\032\057\034\066\035\067\037\071\040\060" +
    "\043\063\045\070\047\062\051\064\001\002\000\100\004" +
    "\uffcf\005\uffcf\007\uffcf\010\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\047\uffcf" +
    "\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\067\uffcf\001\002\000\022" +
    "\007\041\017\040\020\120\021\021\026\011\042\007\047" +
    "\030\053\015\001\002\000\022\007\041\010\uffb3\017\040" +
    "\021\021\026\011\042\007\047\030\053\015\001\002\000" +
    "\004\010\uffea\001\002\000\004\010\117\001\002\000\024" +
    "\007\041\010\uffeb\016\115\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\022\007\041\010\uffb3" +
    "\017\040\021\021\026\011\042\007\047\030\053\015\001" +
    "\002\000\004\010\uffec\001\002\000\100\004\uffcc\005\uffcc" +
    "\007\uffcc\010\uffcc\014\uffcc\016\uffcc\017\uffcc\021\uffcc\026" +
    "\uffcc\027\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\042\uffcc\043\uffcc\045\uffcc\047\uffcc\051\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\067\uffcc\001\002\000\004\014\123\001" +
    "\002\000\022\007\041\014\122\017\040\021\021\026\011" +
    "\042\007\047\030\053\015\001\002\000\100\004\uffca\005" +
    "\uffca\007\uffca\010\uffca\014\uffca\016\uffca\017\uffca\021\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca\037" +
    "\uffca\040\uffca\042\uffca\043\uffca\045\uffca\047\uffca\051\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\067\uffca\001\002\000\100\004\uffcb" +
    "\005\uffcb\007\uffcb\010\uffcb\014\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb\047\uffcb\051" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\067\uffcb\001\002\000\004\012" +
    "\160\001\002\000\010\005\152\062\151\063\153\001\002" +
    "\000\030\007\131\012\uffb3\017\040\021\021\022\010\023" +
    "\025\026\011\042\007\047\030\053\015\064\005\001\002" +
    "\000\004\012\uffc2\001\002\000\044\027\065\031\061\032" +
    "\057\034\066\035\067\037\071\040\060\043\063\045\070" +
    "\047\062\051\064\054\136\055\137\056\141\057\140\060" +
    "\134\061\135\001\002\000\026\007\131\017\040\021\021" +
    "\022\010\023\025\026\011\032\103\042\007\047\030\053" +
    "\015\001\002\000\004\010\133\001\002\000\016\004\uffb6" +
    "\005\uffb6\010\uffb6\062\uffb6\063\uffb6\067\uffb6\001\002\000" +
    "\020\007\041\017\040\021\021\026\011\042\007\047\030" +
    "\053\015\001\002\000\020\007\041\017\040\021\021\026" +
    "\011\042\007\047\030\053\015\001\002\000\020\007\041" +
    "\017\040\021\021\026\011\042\007\047\030\053\015\001" +
    "\002\000\020\007\041\017\040\021\021\026\011\042\007" +
    "\047\030\053\015\001\002\000\020\007\041\017\040\021" +
    "\021\026\011\042\007\047\030\053\015\001\002\000\020" +
    "\007\041\017\040\021\021\026\011\042\007\047\030\053" +
    "\015\001\002\000\044\004\uffbb\005\uffbb\010\uffbb\027\065" +
    "\031\061\032\057\034\066\035\067\037\071\040\060\043" +
    "\063\045\070\047\062\051\064\062\uffbb\063\uffbb\067\uffbb" +
    "\001\002\000\044\004\uffb9\005\uffb9\010\uffb9\027\065\031" +
    "\061\032\057\034\066\035\067\037\071\040\060\043\063" +
    "\045\070\047\062\051\064\062\uffb9\063\uffb9\067\uffb9\001" +
    "\002\000\044\004\uffba\005\uffba\010\uffba\027\065\031\061" +
    "\032\057\034\066\035\067\037\071\040\060\043\063\045" +
    "\070\047\062\051\064\062\uffba\063\uffba\067\uffba\001\002" +
    "\000\044\004\uffbc\005\uffbc\010\uffbc\027\065\031\061\032" +
    "\057\034\066\035\067\037\071\040\060\043\063\045\070" +
    "\047\062\051\064\062\uffbc\063\uffbc\067\uffbc\001\002\000" +
    "\044\004\uffb7\005\uffb7\010\uffb7\027\065\031\061\032\057" +
    "\034\066\035\067\037\071\040\060\043\063\045\070\047" +
    "\062\051\064\062\uffb7\063\uffb7\067\uffb7\001\002\000\044" +
    "\004\uffb8\005\uffb8\010\uffb8\027\065\031\061\032\057\034" +
    "\066\035\067\037\071\040\060\043\063\045\070\047\062" +
    "\051\064\062\uffb8\063\uffb8\067\uffb8\001\002\000\004\012" +
    "\uffc3\001\002\000\024\007\131\017\040\021\021\022\010" +
    "\023\025\026\011\042\007\047\030\053\015\001\002\000" +
    "\020\007\041\017\040\021\021\026\011\042\007\047\030" +
    "\053\015\001\002\000\024\007\131\017\040\021\021\022" +
    "\010\023\025\026\011\042\007\047\030\053\015\001\002" +
    "\000\014\004\uffbf\005\uffbf\062\uffbf\063\uffbf\067\uffbf\001" +
    "\002\000\022\004\156\007\041\017\040\021\021\026\011" +
    "\042\007\047\030\053\015\001\002\000\030\007\uffc1\012" +
    "\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1\042\uffc1" +
    "\047\uffc1\053\uffc1\064\uffc1\001\002\000\014\004\uffc0\005" +
    "\uffc0\062\uffc0\063\uffc0\067\uffc0\001\002\000\040\002\ufff5" +
    "\007\ufff5\012\ufff5\013\ufff5\017\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\026\ufff5\042\ufff5\047\ufff5\053\ufff5\064\ufff5" +
    "\070\ufff5\001\002\000\004\015\202\001\002\000\004\014" +
    "\uffdf\001\002\000\004\014\200\001\002\000\004\014\176" +
    "\001\002\000\026\005\166\007\041\014\uffe1\016\167\017" +
    "\040\021\021\026\011\042\007\047\030\053\015\001\002" +
    "\000\004\017\171\001\002\000\022\007\041\014\uffb3\017" +
    "\040\021\021\026\011\042\007\047\030\053\015\001\002" +
    "\000\004\014\uffe3\001\002\000\004\066\172\001\002\000" +
    "\020\007\041\017\040\021\021\026\011\042\007\047\030" +
    "\053\015\001\002\000\024\007\041\014\uffe0\016\174\017" +
    "\040\021\021\026\011\042\007\047\030\053\015\001\002" +
    "\000\022\007\041\014\uffb3\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\004\014\uffe2\001\002" +
    "\000\004\004\177\001\002\000\040\002\ufff1\007\ufff1\012" +
    "\ufff1\013\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\026\ufff1\042\ufff1\047\ufff1\053\ufff1\064\ufff1\070\ufff1\001" +
    "\002\000\004\004\201\001\002\000\040\002\ufff2\007\ufff2" +
    "\012\ufff2\013\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\026\ufff2\042\ufff2\047\ufff2\053\ufff2\064\ufff2\070\ufff2" +
    "\001\002\000\020\007\041\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\024\007\041\014\uffe4" +
    "\016\204\017\040\021\021\026\011\042\007\047\030\053" +
    "\015\001\002\000\004\020\161\001\002\000\004\014\uffe5" +
    "\001\002\000\040\002\ufffc\007\ufffc\012\ufffc\013\ufffc\017" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\042\ufffc" +
    "\047\ufffc\053\ufffc\064\ufffc\070\ufffc\001\002\000\020\007" +
    "\041\017\040\021\021\026\011\042\007\047\030\053\015" +
    "\001\002\000\024\004\212\005\211\007\041\017\040\021" +
    "\021\026\011\042\007\047\030\053\015\001\002\000\020" +
    "\007\041\017\040\021\021\026\011\042\007\047\030\053" +
    "\015\001\002\000\040\002\ufff7\007\ufff7\012\ufff7\013\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\042" +
    "\ufff7\047\ufff7\053\ufff7\064\ufff7\070\ufff7\001\002\000\022" +
    "\004\214\007\041\017\040\021\021\026\011\042\007\047" +
    "\030\053\015\001\002\000\040\002\ufff6\007\ufff6\012\ufff6" +
    "\013\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026" +
    "\ufff6\042\ufff6\047\ufff6\053\ufff6\064\ufff6\070\ufff6\001\002" +
    "\000\100\004\uffd0\005\uffd0\007\uffd0\010\uffd0\014\uffd0\016" +
    "\uffd0\017\uffd0\021\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0" +
    "\034\uffd0\035\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\045" +
    "\uffd0\047\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\067\uffd0\001" +
    "\002\000\004\002\000\001\002\000\066\007\111\010\uffc9" +
    "\013\110\017\uffc9\021\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9" +
    "\045\uffc9\047\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\065\232\001\002\000\004" +
    "\004\221\001\002\000\026\007\131\017\040\021\021\022" +
    "\010\023\025\026\011\042\007\047\030\053\015\064\005" +
    "\001\002\000\010\004\223\062\151\063\153\001\002\000" +
    "\020\007\041\017\040\021\021\026\011\042\007\047\030" +
    "\053\015\001\002\000\022\007\041\010\225\017\040\021" +
    "\021\026\011\042\007\047\030\053\015\001\002\000\004" +
    "\011\227\001\002\000\040\002\ufff3\007\ufff3\012\ufff3\013" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\042\ufff3\047\ufff3\053\ufff3\064\ufff3\070\ufff3\001\002\000" +
    "\036\007\012\012\uffb3\013\023\017\006\021\021\022\010" +
    "\023\025\024\026\026\011\042\007\047\030\053\015\064" +
    "\005\070\024\001\002\000\004\012\231\001\002\000\040" +
    "\002\uffff\007\uffff\012\uffff\013\uffff\017\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\026\uffff\042\uffff\047\uffff\053\uffff" +
    "\064\uffff\070\uffff\001\002\000\020\007\041\017\040\021" +
    "\021\026\011\042\007\047\030\053\015\001\002\000\024" +
    "\004\uffed\007\041\016\234\017\040\021\021\026\011\042" +
    "\007\047\030\053\015\001\002\000\004\017\235\001\002" +
    "\000\004\065\232\001\002\000\004\004\uffee\001\002\000" +
    "\100\004\uffd5\005\uffd5\007\uffd5\010\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\021\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\034" +
    "\uffd5\035\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\045\uffd5" +
    "\047\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\067\uffd5\001\002" +
    "\000\004\004\265\001\002\000\022\007\243\013\242\017" +
    "\040\021\021\026\011\042\007\047\030\053\015\001\002" +
    "\000\024\007\041\014\uffb3\017\040\020\161\021\021\026" +
    "\011\042\007\047\030\053\015\001\002\000\026\005\246" +
    "\007\041\010\uffb3\017\040\021\021\026\011\032\103\042" +
    "\007\047\030\053\015\001\002\000\022\004\245\007\041" +
    "\017\040\021\021\026\011\042\007\047\030\053\015\001" +
    "\002\000\040\002\ufffb\007\ufffb\012\ufffb\013\ufffb\017\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\042\ufffb\047" +
    "\ufffb\053\ufffb\064\ufffb\070\ufffb\001\002\000\004\017\256" +
    "\001\002\000\006\010\uffe8\016\254\001\002\000\004\010" +
    "\uffe7\001\002\000\004\010\252\001\002\000\004\011\227" +
    "\001\002\000\040\002\ufff8\007\ufff8\012\ufff8\013\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\042\ufff8" +
    "\047\ufff8\053\ufff8\064\ufff8\070\ufff8\001\002\000\006\005" +
    "\246\010\uffb3\001\002\000\004\010\uffe9\001\002\000\006" +
    "\010\uffe6\016\uffe6\001\002\000\004\014\263\001\002\000" +
    "\004\014\261\001\002\000\004\004\262\001\002\000\040" +
    "\002\ufff9\007\ufff9\012\ufff9\013\ufff9\017\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\026\ufff9\042\ufff9\047\ufff9\053\ufff9" +
    "\064\ufff9\070\ufff9\001\002\000\004\004\264\001\002\000" +
    "\040\002\ufffa\007\ufffa\012\ufffa\013\ufffa\017\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\026\ufffa\042\ufffa\047\ufffa\053" +
    "\ufffa\064\ufffa\070\ufffa\001\002\000\040\002\uffef\007\uffef" +
    "\012\uffef\013\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\026\uffef\042\uffef\047\uffef\053\uffef\064\uffef\070\uffef" +
    "\001\002\000\014\004\uffbe\005\uffbe\062\uffbe\063\uffbe\067" +
    "\uffbe\001\002\000\006\002\ufffe\012\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\022\002\012\003\015\005\003\016\021\017" +
    "\016\020\026\021\017\024\013\001\001\000\020\003\266" +
    "\005\003\016\021\017\016\020\026\021\017\024\013\001" +
    "\001\000\006\020\265\021\127\001\001\000\002\001\001" +
    "\000\004\021\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\217\016\103\020\131\021\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\042\001\001\000\014\010" +
    "\163\011\162\016\164\021\036\024\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\123\015" +
    "\125\017\124\020\026\021\127\024\126\001\001\000\006" +
    "\016\041\021\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\103\021\036\001\001\000\004\021\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\047\013\046\024\050\001\001\000\002\001\001\000\010" +
    "\012\052\013\046\024\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\054\021\036\001\001\000\004\021\042\001\001\000" +
    "\002\001\001\000\004\021\101\001\001\000\004\021\100" +
    "\001\001\000\002\001\001\000\004\021\077\001\001\000" +
    "\004\021\076\001\001\000\004\021\075\001\001\000\004" +
    "\021\074\001\001\000\002\001\001\000\004\021\073\001" +
    "\001\000\004\021\072\001\001\000\004\021\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\105\001\001\000\004\021\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\120\021" +
    "\036\001\001\000\012\016\113\021\036\022\112\024\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\042\001\001\000\012\016\113\021\036\022\115\024\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\147\015\125\017\124\020\026\021\127\024\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\103\020" +
    "\131\021\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\146\001\001\000\004\021\145\001\001\000" +
    "\004\021\144\001\001\000\004\021\143\001\001\000\004" +
    "\021\142\001\001\000\004\021\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\156\021\127\001\001\000\006\016\154\021\036" +
    "\001\001\000\006\020\153\021\127\001\001\000\002\001" +
    "\001\000\004\021\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\042" +
    "\001\001\000\002\001\001\000\012\011\167\016\164\021" +
    "\036\024\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\172\021\036\001\001\000\004\021\042\001" +
    "\001\000\012\011\174\016\164\021\036\024\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\202\021\036" +
    "\001\001\000\004\021\042\001\001\000\004\010\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\207" +
    "\021\036\001\001\000\004\021\042\001\001\000\006\016" +
    "\212\021\036\001\001\000\002\001\001\000\004\021\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\221" +
    "\020\026\021\127\001\001\000\002\001\001\000\006\016" +
    "\223\021\036\001\001\000\004\021\042\001\001\000\004" +
    "\004\225\001\001\000\002\001\001\000\020\003\227\005" +
    "\003\016\021\017\016\020\026\021\017\024\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\232\021" +
    "\036\001\001\000\004\021\042\001\001\000\004\007\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\243\021\036\001\001" +
    "\000\014\010\257\011\256\016\164\021\036\024\161\001" +
    "\001\000\014\006\246\016\103\021\036\023\250\024\247" +
    "\001\001\000\004\021\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\252\001\001\000\002\001\001\000" +
    "\010\006\246\023\254\024\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");
		report_error("Syntax error while reading: ", cur_token);
		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 System.out.println(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 sl.addElement(stmt); RESULT = sl ; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IDENTIFIER ASSIGN expression_list SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD " + i + " = " + l + "";	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER ASSIGN LBRAK array RBRAK SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "ARRAY " + i + " = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IDENTIFIER ASSIGN LBRAK dictionary RBRAK SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "DICTIONARY " + i + " = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = "CMD " + i + " = (" + l + ") {\n" + sl + "\n}"; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= condition_list QUERY expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD condition ? " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= condition_list QUERY expression_list COLON expression_list SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CMD condition ? " + e1 + " : " + e2; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "IF-ELSES " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= CASES LPAREN expression_list RPAREN LBRACE case_list RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CASE ( " + e + " ) " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= LPAREN intialize_list SEMI condition_list SEMI expression_list RPAREN statement_block 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		Vector il = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Boolean cl = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector sl = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = "LOOP (" + il + "; " + cl + "; " + e + ") {\n" + sl + "\n}"; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= LBRAK array RBRAK SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "ARRAY = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= LBRAK dictionary RBRAK SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "DICTIONARY = " + l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PRINT STRING SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IDENTIFIER READ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = "READ INTO " + i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // intialize_list ::= IDENTIFIER ASSIGN expression_list COMMA intialize_list 
            {
              Vector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(i + " = " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // intialize_list ::= IDENTIFIER ASSIGN expression_list 
            {
              Vector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(i + " = " + e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_list",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter_list ::= expression_list COMMA parameter_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter_list ::= expression_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_list ::= variable COMMA variable_list 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_list ::= variable 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(v); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dictionary ::= STRING MAP expression_list COMMA dictionary 
            {
              Vector RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(s + " => " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dictionary ::= STRING MAP expression_list 
            {
              Vector RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(s + " => " + e); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array ::= expression_list COMMA array 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array ::= expression_list COLON IDENTIFIER IMPLY expression_list COMMA array 
            {
              Vector RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement("EXPAND " + n + " " + i + " -> "); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array ::= expression_list 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement(e); RESULT = l;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array ::= expression_list COLON IDENTIFIER IMPLY expression_list 
            {
              Vector RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 Vector l = new Vector(); l.addElement("EXPAND " + n + " " + i + " -> "); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_list ::= expression_list expression 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_list ::= expression 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression PLUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 + e2;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression INCREMENT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e++;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression MINUS expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 - e2;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression DECREMENT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e--;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression TIMES expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 * e2;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression EXPONENT expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (int)Math.pow(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression DIVIDE expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 / e2;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= SQRT expression 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (int)Math.sqrt(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression MOD expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 % e2;       	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AMP expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 & e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression BAR expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 | e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression CARET expression 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e1 ^ e2;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= TILDE expression 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ~e;		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LPAREN MINUS expression RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = -e;				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= LPAREN expression_list RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e;           	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= BAR IDENTIFIER BAR 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = 45; // returns size of array or absolute of number 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = 5; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		 RESULT = 7; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= IDENTIFIER LBRAK expression_list RBRAK 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = 1; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = 2; // TBC .. I have a dilemma here. This clashes with a rule in statement but I need to to evaluate a variable in expressions		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n;           	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= NIL 
            {
              Integer RESULT =null;
		 RESULT = null;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // case_list ::= case case_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(c); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // case ::= STRING COLON expression_list SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "CASE " + s + ": " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(c); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_clause_list ::= empty 
            {
              Vector RESULT =null;
		 RESULT = new Vector(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_clause ::= condition_list COLON expression_list SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = "IF-ELSE " + c + ": " + e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition_list ::= condition_list AND condition 
            {
              Boolean RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Boolean c1 = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean c2 = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (c1 && c2);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition_list ::= condition_list OR condition 
            {
              Boolean RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Boolean c1 = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean c2 = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (c1 || c2);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condition_list ::= NOT condition 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (!c);		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition_list ::= condition 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_list",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condition ::= expression EQ expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1.equals(e2));
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= expression LT expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 < e2); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= expression GT expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 > e2); 		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= expression LTEQ expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 <= e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expression GTEQ expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 >= e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition ::= expression NOTEQ expression 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (e1 != e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= LPAREN condition RPAREN 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;				
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condition ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false;			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
