
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;
import java.util.Hashtable;
import smpl.sys.*;
import smpl.sys.expressions.*;
import smpl.sys.commands.*;
import smpl.sys.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\010\000\002\005\006\000" +
    "\002\005\011\000\002\005\012\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\010" +
    "\005\000\002\010\003\000\002\007\003\000\002\007\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\027\005\000" +
    "\002\027\003\000\002\027\003\000\002\026\004\000\002" +
    "\011\007\000\002\011\005\000\002\012\005\000\002\012" +
    "\011\000\002\012\003\000\002\012\007\000\002\012\003" +
    "\000\002\020\004\000\002\020\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\006\000\002\024\005\000\002\024\011\000" +
    "\002\024\005\000\002\024\006\000\002\024\006\000\002" +
    "\024\006\000\002\024\003\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\013\004\000" +
    "\002\013\003\000\002\014\004\000\002\015\005\000\002" +
    "\015\004\000\002\016\004\000\002\016\003\000\002\017" +
    "\005\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\030\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\036\002\uffa1\006\013\012\022\016\007\020" +
    "\005\021\027\024\024\025\004\027\025\031\012\045\015" +
    "\052\026\056\017\073\023\001\002\000\102\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba" +
    "\020\uffba\021\uffba\024\uffba\025\uffba\031\uffba\032\uffba\035" +
    "\uffba\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba\050\uffba" +
    "\052\uffba\054\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000\102" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\012\uffbd\013\uffbd\015" +
    "\uffbd\016\uffbd\020\uffbd\021\uffbd\024\uffbd\025\uffbd\031\uffbd" +
    "\032\uffbd\035\uffbd\040\uffbd\042\uffbd\043\uffbd\045\uffbd\046" +
    "\uffbd\050\uffbd\052\uffbd\054\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001" +
    "\002\000\040\002\uffa1\006\013\011\uffa1\012\022\016\007" +
    "\020\005\021\027\024\024\025\004\027\025\031\012\045" +
    "\015\052\026\056\017\073\023\001\002\000\102\004\uffc0" +
    "\006\130\012\127\016\uffc0\020\uffc0\021\uffc0\024\uffc0\025" +
    "\uffc0\030\300\031\uffc0\032\uffc0\033\246\034\242\035\uffc0" +
    "\036\247\037\250\040\uffc0\041\254\042\uffc0\043\uffc0\044" +
    "\245\045\uffc0\046\uffc0\047\244\050\uffc0\051\253\052\uffc0" +
    "\053\243\054\uffc0\055\251\056\uffc0\070\301\001\002\000" +
    "\032\004\277\006\051\012\022\016\040\020\005\021\027" +
    "\024\024\025\004\031\012\045\015\052\026\056\017\001" +
    "\002\000\004\004\276\001\002\000\102\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\020" +
    "\uffb9\021\uffb9\024\uffb9\025\uffb9\031\uffb9\032\uffb9\035\uffb9" +
    "\040\uffb9\042\uffb9\043\uffb9\045\uffb9\046\uffb9\050\uffb9\052" +
    "\uffb9\054\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000\042\004" +
    "\uffa1\006\041\012\022\016\226\020\005\021\027\022\034" +
    "\023\036\024\024\025\004\031\012\035\045\045\015\052" +
    "\026\056\017\067\042\001\002\000\004\002\225\001\002" +
    "\000\030\006\051\012\022\016\040\020\005\021\027\024" +
    "\024\025\004\031\012\045\015\052\026\056\017\001\002" +
    "\000\006\002\ufffd\011\ufffd\001\002\000\030\006\051\012" +
    "\022\016\040\020\005\021\027\024\024\025\004\031\012" +
    "\045\015\052\026\056\017\001\002\000\004\002\001\001" +
    "\002\000\102\004\uffd3\005\uffd3\006\uffd3\007\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\024\uffd3\025" +
    "\uffd3\031\uffd3\032\060\035\053\040\062\042\063\043\054" +
    "\045\uffd3\046\056\050\064\052\055\054\057\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\001\002\000\034\006\051\012\022\013\uffa1\016" +
    "\040\017\177\020\005\021\027\024\024\025\004\031\012" +
    "\045\015\052\026\056\017\001\002\000\006\006\147\010" +
    "\146\001\002\000\102\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\012\uffbb\013\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\024" +
    "\uffbb\025\uffbb\031\uffbb\032\uffbb\035\uffbb\040\uffbb\042\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\050\uffbb\052\uffbb\054\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\036\006\041\012\022\016" +
    "\040\017\035\020\005\021\027\022\034\023\036\024\024" +
    "\025\004\031\012\045\015\052\026\056\017\001\002\000" +
    "\004\016\030\001\002\000\102\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\020\uffbc\021" +
    "\uffbc\024\uffbc\025\uffbc\031\uffbc\032\uffbc\035\uffbc\040\uffbc" +
    "\042\uffbc\043\uffbc\045\uffbc\046\uffbc\050\uffbc\052\uffbc\054" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\001\002\000\004\052\031\001" +
    "\002\000\102\004\uffc4\005\uffc4\006\uffc4\007\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\024\uffc4\025" +
    "\uffc4\031\uffc4\032\uffc4\035\uffc4\040\uffc4\042\uffc4\043\uffc4" +
    "\045\uffc4\046\uffc4\050\uffc4\052\uffc4\054\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\001\002\000\032\004\145\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\004\004\144\001\002\000" +
    "\014\004\uffa3\005\uffa3\007\uffa3\065\uffa3\066\uffa3\001\002" +
    "\000\004\004\143\001\002\000\014\004\uffa2\005\uffa2\007" +
    "\uffa2\065\uffa2\066\uffa2\001\002\000\070\004\uffd3\006\uffd3" +
    "\007\uffd3\012\uffd3\016\uffd3\020\uffd3\021\uffd3\024\uffd3\025" +
    "\uffd3\031\uffd3\032\060\035\053\040\062\042\063\043\054" +
    "\045\uffd3\046\056\050\064\052\055\054\057\056\uffd3\057" +
    "\105\060\106\061\110\062\107\063\103\064\104\001\002" +
    "\000\102\004\uffc0\005\uffc0\006\130\007\uffc0\012\127\013" +
    "\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\024\uffc0\025\uffc0" +
    "\031\uffc0\032\uffc0\035\uffc0\040\uffc0\042\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\050\uffc0\052\uffc0\054\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\001\002\000\040\006\041\012\022\016\040\020\005" +
    "\021\027\022\034\023\036\024\024\025\004\031\012\035" +
    "\045\045\015\052\026\056\017\067\042\001\002\000\034" +
    "\006\041\012\022\016\040\020\005\021\027\022\034\023" +
    "\036\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\032\006\051\007\125\012\022\016\040\020" +
    "\005\021\027\024\024\025\004\031\012\045\015\052\026" +
    "\056\017\001\002\000\010\007\076\065\077\066\100\001" +
    "\002\000\030\006\051\012\022\016\040\020\005\021\027" +
    "\024\024\025\004\031\012\045\015\052\026\056\017\001" +
    "\002\000\010\007\047\065\uffab\066\uffab\001\002\000\014" +
    "\004\uffa4\005\uffa4\007\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\026\007\061\032\060\035\053\040\062\042\063\043\054" +
    "\046\056\050\064\052\055\054\057\001\002\000\040\006" +
    "\041\012\022\016\040\020\005\021\027\022\034\023\036" +
    "\024\024\025\004\031\012\035\045\045\015\052\026\056" +
    "\017\067\042\001\002\000\014\004\uffab\005\uffab\007\uffab" +
    "\065\uffab\066\uffab\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\030\006\051\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\102\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\021\uffc7\024\uffc7\025\uffc7\031\uffc7\032\uffc7\035\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\050\uffc7\052\uffc7" +
    "\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002\000\030\006\051" +
    "\012\022\016\040\020\005\021\027\024\024\025\004\031" +
    "\012\045\015\052\026\056\017\001\002\000\030\006\051" +
    "\012\022\016\040\020\005\021\027\024\024\025\004\031" +
    "\012\045\015\052\026\056\017\001\002\000\030\006\051" +
    "\012\022\016\040\020\005\021\027\024\024\025\004\031" +
    "\012\045\015\052\026\056\017\001\002\000\102\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\012\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\020\uffcb\021\uffcb\024\uffcb\025\uffcb\031\uffcb\032\060" +
    "\035\053\040\062\042\063\043\054\045\uffcb\046\056\050" +
    "\uffcb\052\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000" +
    "\102\004\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\021\uffcf\024\uffcf\025\uffcf\031" +
    "\uffcf\032\uffcf\035\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\050\uffcf\052\uffcf\054\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\001\002\000\102\004\uffd0\005\uffd0\006\uffd0\007\uffd0\012" +
    "\uffd0\013\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\024\uffd0" +
    "\025\uffd0\031\uffd0\032\uffd0\035\uffd0\040\uffd0\042\063\043" +
    "\uffd0\045\uffd0\046\uffd0\050\uffd0\052\uffd0\054\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\001\002\000\102\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\020\uffd2\021" +
    "\uffd2\024\uffd2\025\uffd2\031\uffd2\032\uffd2\035\uffd2\040\062" +
    "\042\063\043\054\045\uffd2\046\056\050\uffd2\052\uffd2\054" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\102\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9" +
    "\020\uffc9\021\uffc9\024\uffc9\025\uffc9\031\uffc9\032\060\035" +
    "\053\040\062\042\063\043\054\045\uffc9\046\056\050\uffc9" +
    "\052\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\102" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\020\uffcc\021\uffcc\024\uffcc\025\uffcc\031\uffcc" +
    "\032\uffcc\035\uffcc\040\uffcc\042\063\043\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\052\uffcc\054\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001" +
    "\002\000\102\004\uffca\005\uffca\006\uffca\007\uffca\012\uffca" +
    "\013\uffca\015\uffca\016\uffca\020\uffca\021\uffca\024\uffca\025" +
    "\uffca\031\uffca\032\060\035\053\040\062\042\063\043\054" +
    "\045\uffca\046\056\050\uffca\052\uffca\054\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\001\002\000\102\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\012\uffce\013\uffce\015\uffce\016\uffce\020\uffce\021\uffce" +
    "\024\uffce\025\uffce\031\uffce\032\uffce\035\uffce\040\uffce\042" +
    "\063\043\uffce\045\uffce\046\uffce\050\uffce\052\uffce\054\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\001\002\000\102\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\020" +
    "\uffd1\021\uffd1\024\uffd1\025\uffd1\031\uffd1\032\uffd1\035\uffd1" +
    "\040\062\042\063\043\054\045\uffd1\046\056\050\uffd1\052" +
    "\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\004\072" +
    "\120\001\002\000\034\006\041\012\022\016\040\020\005" +
    "\021\027\022\034\023\036\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\034\006\041\012\022" +
    "\016\040\020\005\021\027\022\034\023\036\024\024\025" +
    "\004\031\012\045\015\052\026\056\017\001\002\000\014" +
    "\004\uffad\005\uffad\007\uffad\065\uffad\066\uffad\001\002\000" +
    "\040\032\060\035\053\040\062\042\063\043\054\046\056" +
    "\050\064\052\055\054\057\057\105\060\106\061\110\062" +
    "\107\063\103\064\104\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\036\004\uffa9\005\uffa9" +
    "\007\uffa9\032\060\035\053\040\062\042\063\043\054\046" +
    "\056\050\064\052\055\054\057\065\uffa9\066\uffa9\001\002" +
    "\000\036\004\uffa7\005\uffa7\007\uffa7\032\060\035\053\040" +
    "\062\042\063\043\054\046\056\050\064\052\055\054\057" +
    "\065\uffa7\066\uffa7\001\002\000\036\004\uffa8\005\uffa8\007" +
    "\uffa8\032\060\035\053\040\062\042\063\043\054\046\056" +
    "\050\064\052\055\054\057\065\uffa8\066\uffa8\001\002\000" +
    "\036\004\uffaa\005\uffaa\007\uffaa\032\060\035\053\040\062" +
    "\042\063\043\054\046\056\050\064\052\055\054\057\065" +
    "\uffaa\066\uffaa\001\002\000\036\004\uffa5\005\uffa5\007\uffa5" +
    "\032\060\035\053\040\062\042\063\043\054\046\056\050" +
    "\064\052\055\054\057\065\uffa5\066\uffa5\001\002\000\036" +
    "\004\uffa6\005\uffa6\007\uffa6\032\060\035\053\040\062\042" +
    "\063\043\054\046\056\050\064\052\055\054\057\065\uffa6" +
    "\066\uffa6\001\002\000\014\004\uffae\005\uffae\007\uffae\065" +
    "\uffae\066\uffae\001\002\000\030\006\051\012\022\016\040" +
    "\020\005\021\027\024\024\025\004\031\012\045\015\052" +
    "\026\056\017\001\002\000\032\005\122\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\030\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\102\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\020" +
    "\uffd4\021\uffd4\024\uffd4\025\uffd4\031\uffd4\032\060\035\053" +
    "\040\062\042\063\043\054\045\uffd4\046\056\050\064\052" +
    "\055\054\057\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002\000\076\004" +
    "\uffc5\005\uffc5\007\uffc5\013\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\024\uffc5\025\uffc5\031\uffc5\032\uffc5\035\uffc5\040" +
    "\uffc5\042\uffc5\043\uffc5\045\015\046\uffc5\050\uffc5\052\026" +
    "\054\uffc5\056\017\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\102\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\012\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\031\uffc6\032\uffc6" +
    "\035\uffc6\040\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\050" +
    "\uffc6\052\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000" +
    "\014\004\uffac\005\uffac\007\uffac\065\uffac\066\uffac\001\002" +
    "\000\032\006\051\012\022\016\040\017\140\020\005\021" +
    "\027\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\032\006\051\007\uffa1\012\022\016\040\020" +
    "\005\021\027\024\024\025\004\031\012\045\015\052\026" +
    "\056\017\001\002\000\034\006\051\007\uffe1\012\022\015" +
    "\135\016\040\020\005\021\027\024\024\025\004\031\012" +
    "\045\015\052\026\056\017\001\002\000\004\007\uffe0\001" +
    "\002\000\004\007\134\001\002\000\102\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\021\uffc3\024\uffc3\025\uffc3\031\uffc3\032\uffc3\035\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050\uffc3\052" +
    "\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\032\006" +
    "\051\007\uffa1\012\022\016\040\020\005\021\027\024\024" +
    "\025\004\031\012\045\015\052\026\056\017\001\002\000" +
    "\004\007\uffe2\001\002\000\032\006\051\012\022\013\142" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\004\013\141\001\002" +
    "\000\102\004\uffc2\005\uffc2\006\uffc2\007\uffc2\012\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\024\uffc2\025\uffc2" +
    "\031\uffc2\032\uffc2\035\uffc2\040\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\052\uffc2\054\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\001\002\000\102\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\024" +
    "\uffc1\025\uffc1\031\uffc1\032\uffc1\035\uffc1\040\uffc1\042\uffc1" +
    "\043\uffc1\045\uffc1\046\uffc1\050\uffc1\052\uffc1\054\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\001\002\000\050\002\ufff6\006\ufff6\011" +
    "\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\027\ufff6\031\ufff6\045\ufff6\052" +
    "\ufff6\056\ufff6\067\ufff6\073\ufff6\001\002\000\050\002\ufff4" +
    "\006\ufff4\011\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\031\ufff4" +
    "\045\ufff4\052\ufff4\056\ufff4\067\ufff4\073\ufff4\001\002\000" +
    "\050\002\ufff5\006\ufff5\011\ufff5\012\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027" +
    "\ufff5\031\ufff5\045\ufff5\052\ufff5\056\ufff5\067\ufff5\073\ufff5" +
    "\001\002\000\040\006\041\011\uffa1\012\022\016\040\020" +
    "\005\021\027\022\034\023\036\024\024\025\004\031\012" +
    "\045\015\052\026\056\017\067\042\001\002\000\030\006" +
    "\051\012\022\016\040\020\005\021\027\024\024\025\004" +
    "\031\012\045\015\052\026\056\017\001\002\000\032\006" +
    "\051\007\151\012\022\016\040\020\005\021\027\024\024" +
    "\025\004\031\012\045\015\052\026\056\017\001\002\000" +
    "\004\010\152\001\002\000\006\011\uffa1\017\153\001\002" +
    "\000\004\005\165\001\002\000\006\011\uffa1\017\153\001" +
    "\002\000\004\011\163\001\002\000\004\011\uffb7\001\002" +
    "\000\036\006\013\012\022\016\007\017\161\020\005\021" +
    "\027\024\024\025\004\027\025\031\012\045\015\052\026" +
    "\056\017\073\023\001\002\000\006\011\uffb6\017\uffb6\001" +
    "\002\000\004\005\162\001\002\000\036\006\uffb5\012\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\031\uffb5\045\uffb5\052\uffb5\056\uffb5\073\uffb5\001\002" +
    "\000\050\002\ufff8\006\ufff8\011\ufff8\012\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\027\ufff8\031\ufff8\045\ufff8\052\ufff8\056\ufff8\067\ufff8\073" +
    "\ufff8\001\002\000\004\011\uffb8\001\002\000\036\006\uffb4" +
    "\012\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\025" +
    "\uffb4\027\uffb4\031\uffb4\045\uffb4\052\uffb4\056\uffb4\073\uffb4" +
    "\001\002\000\004\011\uffb2\001\002\000\004\011\175\001" +
    "\002\000\010\005\173\065\077\066\100\001\002\000\040" +
    "\006\041\011\uffa1\012\022\016\040\020\005\021\027\022" +
    "\034\023\036\024\024\025\004\031\012\045\015\052\026" +
    "\056\017\067\042\001\002\000\004\011\uffb3\001\002\000" +
    "\034\006\013\012\022\016\007\020\005\021\027\024\024" +
    "\025\004\027\025\031\012\045\015\052\026\056\017\073" +
    "\023\001\002\000\040\006\uffb1\011\uffb1\012\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\031" +
    "\uffb1\045\uffb1\052\uffb1\056\uffb1\067\uffb1\001\002\000\050" +
    "\002\ufff9\006\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9" +
    "\031\ufff9\045\ufff9\052\ufff9\056\ufff9\067\ufff9\073\ufff9\001" +
    "\002\000\036\005\213\006\051\012\022\013\uffd7\015\214" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\004\014\211\001\002" +
    "\000\004\013\uffd5\001\002\000\004\013\210\001\002\000" +
    "\006\013\204\015\203\001\002\000\004\017\205\001\002" +
    "\000\102\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\024\uffbe\025\uffbe" +
    "\031\uffbe\032\uffbe\035\uffbe\040\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\046\uffbe\050\uffbe\052\uffbe\054\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\001\002\000\004\014\206\001\002\000\030\006\051" +
    "\012\022\016\040\020\005\021\027\024\024\025\004\031" +
    "\012\045\015\052\026\056\017\001\002\000\034\006\051" +
    "\012\022\013\uffdb\015\uffdb\016\040\020\005\021\027\024" +
    "\024\025\004\031\012\045\015\052\026\056\017\001\002" +
    "\000\102\004\uffbf\005\uffbf\006\uffbf\007\uffbf\012\uffbf\013" +
    "\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\024\uffbf\025\uffbf" +
    "\031\uffbf\032\uffbf\035\uffbf\040\uffbf\042\uffbf\043\uffbf\045" +
    "\uffbf\046\uffbf\050\uffbf\052\uffbf\054\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\034\006\051\012\022\013\uffda\015\uffda" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\004\016\216\001\002" +
    "\000\032\006\051\012\022\013\uffa1\016\040\020\005\021" +
    "\027\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\004\013\uffd9\001\002\000\004\071\217\001" +
    "\002\000\030\006\051\012\022\016\040\020\005\021\027" +
    "\024\024\025\004\031\012\045\015\052\026\056\017\001" +
    "\002\000\034\006\051\012\022\013\uffd6\015\221\016\040" +
    "\020\005\021\027\024\024\025\004\031\012\045\015\052" +
    "\026\056\017\001\002\000\032\006\051\012\022\013\uffa1" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\004\013\uffd8\001\002" +
    "\000\102\004\uffc8\005\uffc8\006\uffc8\007\uffc8\012\uffc8\013" +
    "\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8\024\uffc8\025\uffc8" +
    "\031\uffc8\032\uffc8\035\uffc8\040\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\046\uffc8\050\uffc8\052\uffc8\054\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\001\002\000\102\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\024" +
    "\uffcd\025\uffcd\031\uffcd\032\uffcd\035\uffcd\040\uffcd\042\uffcd" +
    "\043\uffcd\045\uffcd\046\uffcd\050\uffcd\052\uffcd\054\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\004\002\000\001\002\000" +
    "\070\006\130\007\uffc0\012\127\016\uffc0\020\uffc0\021\uffc0" +
    "\024\uffc0\025\uffc0\031\uffc0\032\uffc0\035\uffc0\040\uffc0\042" +
    "\uffc0\043\uffc0\045\uffc0\046\uffc0\050\uffc0\052\uffc0\054\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\070\274\001\002\000\004\004\231\001\002\000\004" +
    "\004\ufff1\001\002\000\040\004\uffa1\006\041\012\022\016" +
    "\040\020\005\021\027\022\034\023\036\024\024\025\004" +
    "\031\012\045\015\052\026\056\017\067\042\001\002\000" +
    "\004\004\uffaf\001\002\000\004\004\235\001\002\000\010" +
    "\004\uffb0\065\077\066\100\001\002\000\006\007\uffa1\016" +
    "\240\001\002\000\004\007\267\001\002\000\004\007\ufff0" +
    "\001\002\000\030\033\246\034\242\036\247\037\250\041" +
    "\254\044\245\047\244\051\253\053\243\055\251\070\252" +
    "\001\002\000\004\007\uffef\001\002\000\006\004\uffee\007" +
    "\uffee\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\030\006\051\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\006\004\uffed\007\uffed\001\002\000\030" +
    "\006\051\012\022\016\040\020\005\021\027\024\024\025" +
    "\004\031\012\045\015\052\026\056\017\001\002\000\034" +
    "\006\041\012\022\016\040\020\005\021\027\022\034\023" +
    "\036\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\030\006\051\012\022\016\040\020\005\021" +
    "\027\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\030\006\051\012\022\016\040\020\005\021" +
    "\027\024\024\025\004\031\012\045\015\052\026\056\017" +
    "\001\002\000\034\004\uffe8\006\051\007\uffe8\012\022\016" +
    "\040\020\005\021\027\024\024\025\004\031\012\045\015" +
    "\052\026\056\017\001\002\000\034\004\uffe5\006\051\007" +
    "\uffe5\012\022\016\040\020\005\021\027\024\024\025\004" +
    "\031\012\045\015\052\026\056\017\001\002\000\034\004" +
    "\uffec\006\051\007\uffec\012\022\016\040\020\005\021\027" +
    "\024\024\025\004\031\012\045\015\052\026\056\017\001" +
    "\002\000\006\004\uffeb\007\uffeb\001\002\000\034\004\uffe3" +
    "\006\051\007\uffe3\012\022\016\040\020\005\021\027\024" +
    "\024\025\004\031\012\045\015\052\026\056\017\001\002" +
    "\000\034\004\uffe9\006\051\007\uffe9\012\022\016\040\020" +
    "\005\021\027\024\024\025\004\031\012\045\015\052\026" +
    "\056\017\001\002\000\034\004\uffea\006\051\007\uffea\012" +
    "\022\016\040\020\005\021\027\024\024\025\004\031\012" +
    "\045\015\052\026\056\017\001\002\000\034\004\uffe7\006" +
    "\051\007\uffe7\012\022\016\040\020\005\021\027\024\024" +
    "\025\004\031\012\045\015\052\026\056\017\001\002\000" +
    "\034\004\uffe6\006\051\007\uffe6\012\022\016\040\020\005" +
    "\021\027\024\024\025\004\031\012\045\015\052\026\056" +
    "\017\001\002\000\034\004\uffe4\006\051\007\uffe4\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\004\010\271\001\002" +
    "\000\050\002\ufff7\006\ufff7\011\ufff7\012\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\027\ufff7\031\ufff7\045\ufff7\052\ufff7\056\ufff7\067\ufff7\073" +
    "\ufff7\001\002\000\036\006\013\011\uffa1\012\022\016\007" +
    "\020\005\021\027\024\024\025\004\027\025\031\012\045" +
    "\015\052\026\056\017\073\023\001\002\000\004\011\273" +
    "\001\002\000\050\002\uffff\006\uffff\011\uffff\012\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\027\uffff\031\uffff\045\uffff\052\uffff\056\uffff\067" +
    "\uffff\073\uffff\001\002\000\030\006\051\012\022\016\040" +
    "\020\005\021\027\024\024\025\004\031\012\045\015\052" +
    "\026\056\017\001\002\000\032\004\ufff2\006\051\012\022" +
    "\016\040\020\005\021\027\024\024\025\004\031\012\045" +
    "\015\052\026\056\017\001\002\000\050\002\ufffb\006\ufffb" +
    "\011\ufffb\012\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\031\ufffb\045\ufffb" +
    "\052\ufffb\056\ufffb\067\ufffb\073\ufffb\001\002\000\050\002" +
    "\ufffc\006\ufffc\011\ufffc\012\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\031" +
    "\ufffc\045\ufffc\052\ufffc\056\ufffc\067\ufffc\073\ufffc\001\002" +
    "\000\004\004\314\001\002\000\034\006\302\012\022\016" +
    "\040\020\005\021\027\022\034\023\036\024\024\025\004" +
    "\031\012\045\015\052\026\056\017\001\002\000\044\005" +
    "\304\006\041\007\uffa1\012\022\016\040\020\005\021\027" +
    "\022\034\023\036\024\024\025\004\031\012\035\045\045" +
    "\015\052\026\056\017\067\042\001\002\000\004\007\312" +
    "\001\002\000\004\016\311\001\002\000\004\007\uffdd\001" +
    "\002\000\006\007\uffde\015\307\001\002\000\006\005\304" +
    "\007\uffa1\001\002\000\004\007\uffdf\001\002\000\006\007" +
    "\uffdc\015\uffdc\001\002\000\004\010\271\001\002\000\050" +
    "\002\ufffa\006\ufffa\011\ufffa\012\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa" +
    "\031\ufffa\045\ufffa\052\ufffa\056\ufffa\067\ufffa\073\ufffa\001" +
    "\002\000\050\002\ufff3\006\ufff3\011\ufff3\012\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\027\ufff3\031\ufff3\045\ufff3\052\ufff3\056\ufff3\067\ufff3" +
    "\073\ufff3\001\002\000\006\002\ufffe\011\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\020\002\013\003\017\005\005\006\010\020" +
    "\007\024\020\030\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\314\005\005\006\010\020\007\024" +
    "\020\030\015\001\001\000\002\001\001\000\004\024\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\226\020\042\022\043\023\051\024\036\030\227\001\001" +
    "\000\002\001\001\000\004\024\223\001\001\000\002\001" +
    "\001\000\004\024\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\201\012\200\020\175\024\020\030" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\031\023\032\024\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\042\022\043\023\045\024\036\001" +
    "\001\000\006\023\125\024\101\001\001\000\004\024\122" +
    "\001\001\000\002\001\001\000\004\024\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\042\022\043\023\051\024\036\001\001\000\002\001" +
    "\001\000\004\024\074\001\001\000\004\024\073\001\001" +
    "\000\004\024\072\001\001\000\004\024\071\001\001\000" +
    "\004\024\070\001\001\000\004\024\067\001\001\000\002" +
    "\001\001\000\004\024\066\001\001\000\004\024\065\001" +
    "\001\000\004\024\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\116\024" +
    "\101\001\001\000\006\023\100\024\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\115\001\001\000" +
    "\004\024\114\001\001\000\004\024\113\001\001\000\004" +
    "\024\112\001\001\000\004\024\111\001\001\000\004\024" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\120\024\020\001\001" +
    "\000\004\024\122\001\001\000\006\020\123\024\020\001" +
    "\001\000\002\001\001\000\004\024\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\136\024\020\001" +
    "\001\000\012\020\130\024\020\025\132\030\131\001\001" +
    "\000\004\024\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\130\024\020\025\135" +
    "\030\131\001\001\000\002\001\001\000\004\024\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\166\017\170\022\167\023\051\024\101\030\165" +
    "\001\001\000\006\020\147\024\020\001\001\000\004\024" +
    "\122\001\001\000\002\001\001\000\012\013\154\014\153" +
    "\015\156\030\155\001\001\000\002\001\001\000\012\013" +
    "\163\014\153\015\156\030\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\157\006\010\020\007\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\171\017\170\022\167\023\051\024\101\030" +
    "\165\001\001\000\002\001\001\000\012\005\173\006\010" +
    "\020\007\024\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\206" +
    "\024\020\001\001\000\004\024\122\001\001\000\002\001" +
    "\001\000\006\020\211\024\020\001\001\000\004\024\122" +
    "\001\001\000\002\001\001\000\012\012\214\020\175\024" +
    "\020\030\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\217\024\020\001\001\000\004\024\122\001" +
    "\001\000\012\012\221\020\175\024\020\030\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\232\022\233\023\051\024\101\030" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\236\007\235\030\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\265\024\020\001" +
    "\001\000\006\020\264\024\020\001\001\000\006\020\263" +
    "\024\020\001\001\000\006\020\262\024\020\001\001\000" +
    "\006\020\261\024\020\001\001\000\002\001\001\000\006" +
    "\020\260\024\020\001\001\000\010\020\256\023\257\024" +
    "\036\001\001\000\006\020\255\024\020\001\001\000\006" +
    "\020\254\024\020\001\001\000\004\024\122\001\001\000" +
    "\004\024\122\001\001\000\004\024\122\001\001\000\002" +
    "\001\001\000\004\024\122\001\001\000\004\024\122\001" +
    "\001\000\004\024\122\001\001\000\004\024\122\001\001" +
    "\000\004\024\122\001\001\000\004\024\122\001\001\000" +
    "\004\004\267\001\001\000\002\001\001\000\016\003\271" +
    "\005\005\006\010\020\007\024\020\030\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\274\024\020" +
    "\001\001\000\004\024\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\256\023\257" +
    "\024\036\001\001\000\020\020\042\022\043\023\045\024" +
    "\036\026\305\027\302\030\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\305\027\307\030\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Create a lexer that reads from specified input stream
    if (in == null) {
		in = System.in;
		lexer = new SMPLLexer( new InputStreamReader(in) );
	}
	setScanner( lexer );

    }


	SMPLLexer lexer;
	InputStream in = null;

	public SMPLParser(String file) {
		try {
			in = new FileInputStream(file);
			lexer = new SMPLLexer(new InputStreamReader(in));
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}	    
	}

	public void report_error(String message, Object info) {
	    System.err.println(message + info);
	}

	public void syntax_error(Symbol cur_token) {
		System.err.print("Line " + lexer.getLine() +
				         " near char " + lexer.getChar() + ": ");

		report_error("Syntax error while reading: ", cur_token);

		System.err.println ("Last token read is " +
					        lexer.getText());
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Program(sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_block ::= LBRACE statement_list RBRACE 
            {
              Vector<ICommand> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<ICommand> l = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_block",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement statement_list 
            {
              Vector<ICommand> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand stmt = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				sl.addElement(stmt);
				RESULT = sl;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= empty 
            {
              Vector<ICommand> RESULT =null;
		 RESULT = new Vector<ICommand>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpressionCommand(e);	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= assignment_statement SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER ASSIGN LPAREN variable_list RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentFunctionCommand(i, l, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= CASES LBRACE if_clause_list RBRACE 
            {
              ICommand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ElsesCommand(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= CASES LPAREN expression_sequence RPAREN LBRACE case_list RBRACE 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<Cases> l = (Vector<Cases>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CasesCommand(e, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= LPAREN intialize_statement SEMI loop_condition SEMI stepper RPAREN statement_block 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		ICommand i = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<ICommand> sl = (Vector<ICommand>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LoopCommand(i, c, s, sl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= PRINT STRING SEMI 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= PRINT expression_sequence SEMI 
            {
              ICommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= PRINT condition SEMI 
            {
              ICommand RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintCommand(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IDENTIFIER READ SEMI 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ReadCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // intialize_statement ::= IDENTIFIER ASSIGN expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				RESULT = new AssignmentExpressionCommand(i, e);
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_statement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // intialize_statement ::= empty 
            {
              ICommand RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("intialize_statement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stepper ::= assignment_statement 
            {
              ICommand RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stepper",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stepper ::= empty 
            {
              ICommand RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stepper",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment_statement ::= IDENTIFIER INCREMENT 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new IncrementCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment_statement ::= IDENTIFIER DECREMENT 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DecrementCommand(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment_statement ::= IDENTIFIER ASSIGN expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment_statement ::= IDENTIFIER ASSIGN condition 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentExpressionCommand(i, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment_statement ::= IDENTIFIER ASSIGNADD expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentAddExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment_statement ::= IDENTIFIER ASSIGNSUB expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentSubExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment_statement ::= IDENTIFIER ASSIGNTIMES expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentMulExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment_statement ::= IDENTIFIER ASSIGNDIVIDE expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentDivExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment_statement ::= IDENTIFIER ASSIGNMOD expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentModExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment_statement ::= IDENTIFIER ASSIGNAMP expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentAmpExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment_statement ::= IDENTIFIER ASSIGNBAR expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentBarExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment_statement ::= IDENTIFIER ASSIGNCARET expression_sequence 
            {
              ICommand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AssignmentInvExpressionCommand(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= expression_sequence COMMA parameter_list 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_list ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_list ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_list ::= variable COMMA variable_list 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 l.addElement(v); RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_list ::= variable 
            {
              Vector<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(v);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_list ::= empty 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable_list",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= COLON IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dictionary ::= dictionary COMMA STRING MAP expression_sequence 
            {
              Hashtable<String,IExpression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dictionary ::= STRING MAP expression_sequence 
            {
              Hashtable<String,IExpression> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Hashtable<String,IExpression> l = new Hashtable<String,IExpression>();
				l.put(s, e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("dictionary",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // array ::= expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(e);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence COMMA array 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(new ArrayInitializationExpression(n, i, e)); 
				RESULT = l; 
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array ::= expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				Vector<IExpression> l = new Vector<IExpression>(); 
				l.addElement(e); 
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array ::= expression_sequence COLON IDENTIFIER IMPLY expression_sequence 
            {
              Vector<IExpression> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		IExpression n = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				Vector<IExpression> l = new Vector<IExpression>();
				l.addElement(new ArrayInitializationExpression(n, i, e));
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array ::= empty 
            {
              Vector<IExpression> RESULT =null;
		 RESULT = new Vector<IExpression>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_sequence ::= expression_sequence expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_sequence ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression_sequence",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression PLUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AdditionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MINUS expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubtractionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression TIMES expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new MultiplicationExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression EXPONENT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExponentExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression DIVIDE expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DivisionExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= RADICAL expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SquareRootExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression MOD expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ModulusExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression AMP expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseAndExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression BAR expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseOrExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression CARET expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseXorExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= TILDE expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BitwiseInvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= LPAREN MINUS expression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new InvertExpression(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= LPAREN expression_sequence RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= LPAREN condition_sequence RPAREN QUERY expression_sequence COLON expression_sequence 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new QueryExpression(c, e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= BAR IDENTIFIER BAR 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SizeOfExpression(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new FunctionExpression(i, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= IDENTIFIER LBRAK STRING RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryIndexExpression(i, x); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= IDENTIFIER LBRAK expression_sequence RBRAK 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayIndexExpression(i, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= IDENTIFIER 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VariableExpression(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= LBRAK array RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<IExpression> l = (Vector<IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ArrayExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= LBRAK dictionary RBRAK 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Hashtable<String,IExpression> l = (Hashtable<String,IExpression>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new DictionaryExpression(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= LONG 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LongExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= DOUBLE 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new DoubleExpression(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= PI 
            {
              IExpression RESULT =null;
		 RESULT = new DoubleExpression(3.14159); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= EULER 
            {
              IExpression RESULT =null;
		 RESULT = new DoubleExpression(2.7182818284590452353602874713527); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= NIL 
            {
              IExpression RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_list ::= case case_list 
            {
              Vector<Cases> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Cases> l = (Vector<Cases>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_list ::= empty 
            {
              Vector<Cases> RESULT =null;
		 RESULT = new Vector<Cases>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_list",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case ::= case_expressions statement 
            {
              Cases RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Cases(l, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_expressions ::= case_expressions STRING COLON 
            {
              Vector<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Vector<String> l = (Vector<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
				l.addElement(i);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_expressions ::= STRING COLON 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
				Vector<String> l = new Vector<String>();
				l.addElement(i);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case_expressions",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_clause_list ::= if_clause if_clause_list 
            {
              Vector<Elses> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Elses c = (Elses)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Vector<Elses> l = (Vector<Elses>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				l.addElement(c);
				RESULT = l;
			
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_clause_list ::= empty 
            {
              Vector<Elses> RESULT =null;
		 RESULT = new Vector<Elses>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause_list",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_clause ::= condition_sequence COLON statement 
            {
              Elses RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Elses(c, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("if_clause",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop_condition ::= condition_sequence 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loop_condition",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop_condition ::= empty 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loop_condition",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condition_sequence ::= condition_sequence AND condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalAndExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condition_sequence ::= condition_sequence OR condition 
            {
              IExpression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression c1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalOrExpression(c1, c2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condition_sequence ::= NOT condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LogicalNotExpression(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condition_sequence ::= condition 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition_sequence",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condition ::= expression EQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condition ::= expression LT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condition ::= expression GT expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condition ::= expression LTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new LesserThanOrEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condition ::= expression GTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new GreaterThanOrEqualsExpression(e1, e2); 	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condition ::= expression NOTEQ expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condition ::= LPAREN condition RPAREN 
            {
              IExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		IExpression c = (IExpression)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c;	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condition ::= TRUE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(true)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condition ::= FALSE 
            {
              IExpression RESULT =null;
		 RESULT = new BooleanExpression(Boolean.valueOf(false));	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
